<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NLP-Assignment1</title>
    <link href="/2022/05/05/NLP-Assignment1/"/>
    <url>/2022/05/05/NLP-Assignment1/</url>
    
    <content type="html"><![CDATA[<h1 id="assignment1">Assignment1</h1><p>所有使用到的头文件如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># All Import Statements Defined Here</span><br><span class="hljs-comment"># Note: Do not add to this list.</span><br><span class="hljs-comment"># ----------------</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">assert</span> sys.version_info[<span class="hljs-number">0</span>]==<span class="hljs-number">3</span><br><span class="hljs-keyword">assert</span> sys.version_info[<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">5</span><br><br><span class="hljs-keyword">from</span> gensim.models <span class="hljs-keyword">import</span> KeyedVectors<br><span class="hljs-keyword">from</span> gensim.test.utils <span class="hljs-keyword">import</span> datapath<br><span class="hljs-keyword">import</span> pprint<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>plt.rcParams[<span class="hljs-string">&#x27;figure.figsize&#x27;</span>] = [<span class="hljs-number">10</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">import</span> nltk<br>nltk.download(<span class="hljs-string">&#x27;reuters&#x27;</span>)<br><span class="hljs-keyword">from</span> nltk.corpus <span class="hljs-keyword">import</span> reuters<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> scipy <span class="hljs-keyword">as</span> sp<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> TruncatedSVD<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><br>START_TOKEN = <span class="hljs-string">&#x27;&lt;START&gt;&#x27;</span><br>END_TOKEN = <span class="hljs-string">&#x27;&lt;END&gt;&#x27;</span><br><br>np.random.seed(<span class="hljs-number">0</span>)<br>random.seed(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># ----------------</span><br></code></pre></div></td></tr></table></figure><h2 id="part-1基于计数的词向量">Part 1：基于计数的词向量</h2><p>大多数词向量模型都是基于一个观点：</p><p><strong>You shall know a word by the company it keeps (<ahref="https://en.wikipedia.org/wiki/John_Rupert_Firth">Firth, J. R.1957:11</a>)</strong></p><p>大多数词向量的实现的核心是 <em>相似词</em>，也就是同义词，因为它们有相似的上下文。这里我们介绍一种策略叫做<em>共现矩阵</em> (更多信息可以查看 <ahref="http://web.stanford.edu/class/cs124/lec/vectorsemantics.video.pdf">这里</a>或 <ahref="https://medium.com/data-science-group-iitr/word-embedding-2d05d270b285">这里</a>)</p><p>这部分要实现的是，给定语料库，根据共现矩阵计算词向量，得到语料库中每个词的词向量，流程如下：</p><ul><li>计算语料库的单词集</li><li>计算共现矩阵</li><li>使用SVD降维</li><li>分析词向量</li></ul><h3 id="问题1.1实现-dicintct_words">问题1.1：实现 dicintct_words</h3><p>计算语料库的单词数量、单词集</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">distinct_words</span>(<span class="hljs-params">corpus</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Determine a list of distinct words for the corpus.</span><br><span class="hljs-string">        Params:</span><br><span class="hljs-string">            corpus (list of list of strings): corpus of documents</span><br><span class="hljs-string">        Return:</span><br><span class="hljs-string">            corpus_words (list of strings): list of distinct words across the corpus, sorted (using python &#x27;sorted&#x27; function)</span><br><span class="hljs-string">            num_corpus_words (integer): number of distinct words across the corpus</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    corpus_words = []<br>    num_corpus_words = -<span class="hljs-number">1</span><br>    <br>    <span class="hljs-comment"># ------------------</span><br>    <span class="hljs-comment"># Write your implementation here.</span><br>    corpus_words =  <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>([word <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> corpus <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> sentence])))<br>    num_corpus_words = <span class="hljs-built_in">len</span>(corpus_words)<br><br>    <span class="hljs-comment"># ------------------</span><br><br>    <span class="hljs-keyword">return</span> corpus_words, num_corpus_words<br></code></pre></div></td></tr></table></figure><p>测试用例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ---------------------</span><br><span class="hljs-comment"># Run this sanity check</span><br><span class="hljs-comment"># Note that this not an exhaustive check for correctness.</span><br><span class="hljs-comment"># ---------------------</span><br><br><span class="hljs-comment"># Define toy corpus</span><br>test_corpus = [<span class="hljs-string">&quot;&#123;&#125; All that glitters isn&#x27;t gold &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(START_TOKEN, END_TOKEN).split(<span class="hljs-string">&quot; &quot;</span>), <span class="hljs-string">&quot;&#123;&#125; All&#x27;s well that ends well &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(START_TOKEN, END_TOKEN).split(<span class="hljs-string">&quot; &quot;</span>)]<br>test_corpus_words, num_corpus_words = distinct_words(test_corpus)<br><br><span class="hljs-comment"># Correct answers</span><br>ans_test_corpus_words = <span class="hljs-built_in">sorted</span>([START_TOKEN, <span class="hljs-string">&quot;All&quot;</span>, <span class="hljs-string">&quot;ends&quot;</span>, <span class="hljs-string">&quot;that&quot;</span>, <span class="hljs-string">&quot;gold&quot;</span>, <span class="hljs-string">&quot;All&#x27;s&quot;</span>, <span class="hljs-string">&quot;glitters&quot;</span>, <span class="hljs-string">&quot;isn&#x27;t&quot;</span>, <span class="hljs-string">&quot;well&quot;</span>, END_TOKEN])<br>ans_num_corpus_words = <span class="hljs-built_in">len</span>(ans_test_corpus_words)<br><br><span class="hljs-comment"># Test correct number of words</span><br><span class="hljs-keyword">assert</span>(num_corpus_words == ans_num_corpus_words), <span class="hljs-string">&quot;Incorrect number of distinct words. Correct: &#123;&#125;. Yours: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ans_num_corpus_words, num_corpus_words)<br><br><span class="hljs-comment"># Test correct words</span><br><span class="hljs-keyword">assert</span> (test_corpus_words == ans_test_corpus_words), <span class="hljs-string">&quot;Incorrect corpus_words.\nCorrect: &#123;&#125;\nYours:   &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(ans_test_corpus_words), <span class="hljs-built_in">str</span>(test_corpus_words))<br><br><span class="hljs-comment"># Print Success</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Passed All Tests!&quot;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br></code></pre></div></td></tr></table></figure><h3id="问题1.2实现compute_co_occurrence_matrix">问题1.2：实现compute_co_occurrence_matrix</h3><p>计算给定语料库的共现矩阵。具体来说，对于每一个词<code>w</code>，统计前、后方 <code>window_size</code> 个词的出现次数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_co_occurrence_matrix</span>(<span class="hljs-params">corpus, window_size=<span class="hljs-number">4</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Compute co-occurrence matrix for the given corpus and window_size (default of 4).</span><br><span class="hljs-string">    </span><br><span class="hljs-string">        Note: Each word in a document should be at the center of a window. Words near edges will have a smaller</span><br><span class="hljs-string">              number of co-occurring words.</span><br><span class="hljs-string">              </span><br><span class="hljs-string">              For example, if we take the document &quot;START All that glitters is not gold END&quot; with window size of 4,</span><br><span class="hljs-string">              &quot;All&quot; will co-occur with &quot;START&quot;, &quot;that&quot;, &quot;glitters&quot;, &quot;is&quot;, and &quot;not&quot;.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">        Params:</span><br><span class="hljs-string">            corpus (list of list of strings): corpus of documents</span><br><span class="hljs-string">            window_size (int): size of context window</span><br><span class="hljs-string">        Return:</span><br><span class="hljs-string">            M (numpy matrix of shape (number of corpus words, number of corpus words)): </span><br><span class="hljs-string">                Co-occurence matrix of word counts. </span><br><span class="hljs-string">                The ordering of the words in the rows/columns should be the same as the ordering of the words given by the distinct_words function.</span><br><span class="hljs-string">            word2Ind (dict): dictionary that maps word to index (i.e. row/column number) for matrix M.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    words, num_words = distinct_words(corpus)<br>    M = np.zeros((num_words, num_words))<br>    word2Ind = <span class="hljs-built_in">dict</span>([(word, index) <span class="hljs-keyword">for</span> index, word <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(words)])<br>    <br>    <span class="hljs-comment"># ------------------</span><br>    <span class="hljs-comment"># Write your implementation here.</span><br>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> corpus:<br>        current_index = <span class="hljs-number">0</span><br>        sentence_len = <span class="hljs-built_in">len</span>(sentence)<br>        indices = [word2Ind[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sentence]<br>        <span class="hljs-keyword">while</span> current_index &lt; sentence_len:<br>            left  = <span class="hljs-built_in">max</span>(current_index - window_size, <span class="hljs-number">0</span>)<br>            right = <span class="hljs-built_in">min</span>(current_index + window_size + <span class="hljs-number">1</span>, sentence_len) <br>            current_word = sentence[current_index]<br>            current_word_index = word2Ind[current_word]<br>            words_around = indices[left:current_index] + indices[current_index+<span class="hljs-number">1</span>:right]<br>            <br>            <span class="hljs-keyword">for</span> ind <span class="hljs-keyword">in</span> words_around:<br>                M[current_word_index, ind] += <span class="hljs-number">1</span><br>            <br>            current_index += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># ------------------</span><br><br>    <span class="hljs-keyword">return</span> M, word2Ind<br></code></pre></div></td></tr></table></figure><p>测试用例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ---------------------</span><br><span class="hljs-comment"># Run this sanity check</span><br><span class="hljs-comment"># Note that this is not an exhaustive check for correctness.</span><br><span class="hljs-comment"># ---------------------</span><br><br><span class="hljs-comment"># Define toy corpus and get student&#x27;s co-occurrence matrix</span><br>test_corpus = [<span class="hljs-string">&quot;&#123;&#125; All that glitters isn&#x27;t gold &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(START_TOKEN, END_TOKEN).split(<span class="hljs-string">&quot; &quot;</span>), <span class="hljs-string">&quot;&#123;&#125; All&#x27;s well that ends well &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(START_TOKEN, END_TOKEN).split(<span class="hljs-string">&quot; &quot;</span>)]<br>M_test, word2ind_test = compute_co_occurrence_matrix(test_corpus, window_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Correct M and word2ind</span><br>M_test_ans = np.array( <br>    [[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>,],<br>     [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,],<br>     [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>,],<br>     [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>,],<br>     [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>,],<br>     [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>,],<br>     [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,],<br>     [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,],<br>     [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>,],<br>     [<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>,]]<br>)<br>ans_test_corpus_words = <span class="hljs-built_in">sorted</span>([START_TOKEN, <span class="hljs-string">&quot;All&quot;</span>, <span class="hljs-string">&quot;ends&quot;</span>, <span class="hljs-string">&quot;that&quot;</span>, <span class="hljs-string">&quot;gold&quot;</span>, <span class="hljs-string">&quot;All&#x27;s&quot;</span>, <span class="hljs-string">&quot;glitters&quot;</span>, <span class="hljs-string">&quot;isn&#x27;t&quot;</span>, <span class="hljs-string">&quot;well&quot;</span>, END_TOKEN])<br>word2ind_ans = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(ans_test_corpus_words, <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ans_test_corpus_words))))<br><br><span class="hljs-comment"># Test correct word2ind</span><br><span class="hljs-keyword">assert</span> (word2ind_ans == word2ind_test), <span class="hljs-string">&quot;Your word2ind is incorrect:\nCorrect: &#123;&#125;\nYours: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word2ind_ans, word2ind_test)<br><br><span class="hljs-comment"># Test correct M shape</span><br><span class="hljs-keyword">assert</span> (M_test.shape == M_test_ans.shape), <span class="hljs-string">&quot;M matrix has incorrect shape.\nCorrect: &#123;&#125;\nYours: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(M_test.shape, M_test_ans.shape)<br><br><span class="hljs-comment"># Test correct M values</span><br><span class="hljs-keyword">for</span> w1 <span class="hljs-keyword">in</span> word2ind_ans.keys():<br>    idx1 = word2ind_ans[w1]<br>    <span class="hljs-keyword">for</span> w2 <span class="hljs-keyword">in</span> word2ind_ans.keys():<br>        idx2 = word2ind_ans[w2]<br>        student = M_test[idx1, idx2]<br>        correct = M_test_ans[idx1, idx2]<br>        <span class="hljs-keyword">if</span> student != correct:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct M:&quot;</span>)<br>            <span class="hljs-built_in">print</span>(M_test_ans)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your M: &quot;</span>)<br>            <span class="hljs-built_in">print</span>(M_test)<br>            <span class="hljs-keyword">raise</span> AssertionError(<span class="hljs-string">&quot;Incorrect count at index (&#123;&#125;, &#123;&#125;)=(&#123;&#125;, &#123;&#125;) in matrix M. Yours has &#123;&#125; but should have &#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(idx1, idx2, w1, w2, student, correct))<br><br><span class="hljs-comment"># Print Success</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Passed All Tests!&quot;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br></code></pre></div></td></tr></table></figure><h3 id="问题1.3实现-reduce_to_k_dim">问题1.3：实现 reduce_to_k_dim</h3><p>这一步是降维。在问题1.2得到的是一个N xN的矩阵（N是单词集的大小），使用scikit-learn实现的SVD（奇异值分解），从这个大矩阵里分解出一个含k个特制的Nx k 小矩阵。</p><p><strong>注意</strong>：在numpy、scipy和scikit-learn都提供了一些SVD的实现，但是只有scipy、sklearn有TruncatedSVD，并且只有sklearn提供了计算大规模SVD的高效的randomized算法，详情参考<ahref="https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html">sklearn.decomposition.TruncatedSVD</a>。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reduce_to_k_dim</span>(<span class="hljs-params">M, k=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Reduce a co-occurence count matrix of dimensionality (num_corpus_words, num_corpus_words)</span><br><span class="hljs-string">        to a matrix of dimensionality (num_corpus_words, k) using the following SVD function from Scikit-Learn:</span><br><span class="hljs-string">            - http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html</span><br><span class="hljs-string">    </span><br><span class="hljs-string">        Params:</span><br><span class="hljs-string">            M (numpy matrix of shape (number of corpus words, number of corpus words)): co-occurence matrix of word counts</span><br><span class="hljs-string">            k (int): embedding size of each word after dimension reduction</span><br><span class="hljs-string">        Return:</span><br><span class="hljs-string">            M_reduced (numpy matrix of shape (number of corpus words, k)): matrix of k-dimensioal word embeddings.</span><br><span class="hljs-string">                    In terms of the SVD from math class, this actually returns U * S</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    <br>    n_iters = <span class="hljs-number">10</span>     <span class="hljs-comment"># Use this parameter in your call to `TruncatedSVD`</span><br>    M_reduced = <span class="hljs-literal">None</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Running Truncated SVD over %i words...&quot;</span> % (M.shape[<span class="hljs-number">0</span>]))<br>    <br>    <span class="hljs-comment"># ------------------</span><br>    <span class="hljs-comment"># Write your implementation here.</span><br>    TSVD = TruncatedSVD(n_components=k, n_iter=n_iters)<br>    M_reduced = TSVD.fit_transform(M)<br><br>    <span class="hljs-comment"># ------------------</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done.&quot;</span>)<br>    <span class="hljs-keyword">return</span> M_reduced<br></code></pre></div></td></tr></table></figure><p>测试用例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ---------------------</span><br><span class="hljs-comment"># Run this sanity check</span><br><span class="hljs-comment"># Note that this is not an exhaustive check for correctness </span><br><span class="hljs-comment"># In fact we only check that your M_reduced has the right dimensions.</span><br><span class="hljs-comment"># ---------------------</span><br><br><span class="hljs-comment"># Define toy corpus and run student code</span><br>test_corpus = [<span class="hljs-string">&quot;&#123;&#125; All that glitters isn&#x27;t gold &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(START_TOKEN, END_TOKEN).split(<span class="hljs-string">&quot; &quot;</span>), <span class="hljs-string">&quot;&#123;&#125; All&#x27;s well that ends well &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(START_TOKEN, END_TOKEN).split(<span class="hljs-string">&quot; &quot;</span>)]<br>M_test, word2ind_test = compute_co_occurrence_matrix(test_corpus, window_size=<span class="hljs-number">1</span>)<br>M_test_reduced = reduce_to_k_dim(M_test, k=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Test proper dimensions</span><br><span class="hljs-keyword">assert</span> (M_test_reduced.shape[<span class="hljs-number">0</span>] == <span class="hljs-number">10</span>), <span class="hljs-string">&quot;M_reduced has &#123;&#125; rows; should have &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(M_test_reduced.shape[<span class="hljs-number">0</span>], <span class="hljs-number">10</span>)<br><span class="hljs-keyword">assert</span> (M_test_reduced.shape[<span class="hljs-number">1</span>] == <span class="hljs-number">2</span>), <span class="hljs-string">&quot;M_reduced has &#123;&#125; columns; should have &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(M_test_reduced.shape[<span class="hljs-number">1</span>], <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Print Success</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Passed All Tests!&quot;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br></code></pre></div></td></tr></table></figure><h3 id="问题1.4-实现-plot_embeddings">问题1.4 实现 plot_embeddings</h3><p>基于matplotlib，用<code>scatter</code> 画 “×”，用 <code>text</code>写字</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_embeddings</span>(<span class="hljs-params">M_reduced, word2Ind, words</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; Plot in a scatterplot the embeddings of the words specified in the list &quot;words&quot;.</span><br><span class="hljs-string">        NOTE: do not plot all the words listed in M_reduced / word2Ind.</span><br><span class="hljs-string">        Include a label next to each point.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        Params:</span><br><span class="hljs-string">            M_reduced (numpy matrix of shape (number of unique words in the corpus , k)): matrix of k-dimensioal word embeddings</span><br><span class="hljs-string">            word2Ind (dict): dictionary that maps word to indices for matrix M</span><br><span class="hljs-string">            words (list of strings): words whose embeddings we want to visualize</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># ------------------</span><br>    <span class="hljs-comment"># Write your implementation here.</span><br>    <br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> words:<br>        index = word2Ind[w]<br>        embedding = M_reduced[index]<br>        x, y  = embedding[<span class="hljs-number">0</span>], embedding[<span class="hljs-number">1</span>]<br>        plt.scatter(x, y, marker=<span class="hljs-string">&#x27;x&#x27;</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>        plt.text(x, y, word, fontsize=<span class="hljs-number">9</span>)<br>    plt.show()<br>    <span class="hljs-comment"># ------------------</span><br></code></pre></div></td></tr></table></figure><p>测试用例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ---------------------</span><br><span class="hljs-comment"># Run this sanity check</span><br><span class="hljs-comment"># Note that this is not an exhaustive check for correctness.</span><br><span class="hljs-comment"># The plot produced should look like the &quot;test solution plot&quot; depicted below. </span><br><span class="hljs-comment"># ---------------------</span><br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Outputted Plot:&quot;</span>)<br><br>M_reduced_plot_test = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br>word2ind_plot_test = &#123;<span class="hljs-string">&#x27;test1&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;test2&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;test3&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;test4&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;test5&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>words = [<span class="hljs-string">&#x27;test1&#x27;</span>, <span class="hljs-string">&#x27;test2&#x27;</span>, <span class="hljs-string">&#x27;test3&#x27;</span>, <span class="hljs-string">&#x27;test4&#x27;</span>, <span class="hljs-string">&#x27;test5&#x27;</span>]<br>plot_embeddings(M_reduced_plot_test, word2ind_plot_test, words)<br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">80</span>)<br></code></pre></div></td></tr></table></figure><p>效果：</p><p><img src="/img/nlp/assignment1/1.jpg"/></p><h3 id="问题1.5共现打印分析">问题1.5：共现打印分析</h3><p>将词嵌入到2个维度上，归一化，最终词向量会落到一个单位圆内，在坐标系上寻找相近的词。</p><p>测试用例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -----------------------------</span><br><span class="hljs-comment"># Run This Cell to Produce Your Plot</span><br><span class="hljs-comment"># ------------------------------</span><br>reuters_corpus = read_corpus()<br>M_co_occurrence, word2ind_co_occurrence = compute_co_occurrence_matrix(reuters_corpus)<br>M_reduced_co_occurrence = reduce_to_k_dim(M_co_occurrence, k=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Rescale (normalize) the rows to make them each of unit-length</span><br>M_lengths = np.linalg.norm(M_reduced_co_occurrence, axis=<span class="hljs-number">1</span>)<br>M_normalized = M_reduced_co_occurrence / M_lengths[:, np.newaxis] <span class="hljs-comment"># broadcasting</span><br><br>words = [<span class="hljs-string">&#x27;barrels&#x27;</span>, <span class="hljs-string">&#x27;bpd&#x27;</span>, <span class="hljs-string">&#x27;ecuador&#x27;</span>, <span class="hljs-string">&#x27;energy&#x27;</span>, <span class="hljs-string">&#x27;industry&#x27;</span>, <span class="hljs-string">&#x27;kuwait&#x27;</span>, <span class="hljs-string">&#x27;oil&#x27;</span>, <span class="hljs-string">&#x27;output&#x27;</span>, <span class="hljs-string">&#x27;petroleum&#x27;</span>, <span class="hljs-string">&#x27;iraq&#x27;</span>]<br><br>plot_embeddings(M_normalized, word2ind_co_occurrence, words)<br></code></pre></div></td></tr></table></figure><p><img src="/img/nlp/assignment1/2.jpg"/></p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
      <category>NLP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二讲-词向量进阶</title>
    <link href="/2022/05/05/%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E8%AF%8D%E5%90%91%E9%87%8F%E8%BF%9B%E9%98%B6/"/>
    <url>/2022/05/05/%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E8%AF%8D%E5%90%91%E9%87%8F%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="算法优化基础">1 算法优化基础</h1><h2 id="词向量梯度下降算法">1.1 词向量梯度下降算法</h2><p>问题：梯度下降会一次性使用所有数据样本进行参数更新，对应到我们当前的词向量建模问题，就是<spanclass="math inline">\(J(\theta)\)</span>的计算需要基于语料库所有的样本(窗口)，数据规模非常大：</p><ul><li>计算非常耗资源</li><li>计算时间长</li></ul><p>解决方案：随机梯度下降算法 Stochastic Gradient Descent（SGD）</p><ul><li>在单个样本中计算和更新参数，并遍历所有样本</li></ul><p>但基于单个样本更新会表现为参数震荡很厉害，收敛过程并不平稳，所以很多时候我们会改为使用<strong>mini-batchgradient descent</strong></p><h2 id="词向量建模中的随机梯度下降">1.2 词向量建模中的随机梯度下降</h2><ul><li>应用随机梯度下降，在每个窗口计算和更新参数，遍历所有样本</li><li>在每个窗口内，我们最多只有<spanclass="math inline">\(2m+1\)</span>个词，因此<spanclass="math inline">\(\nabla_{\theta}J_{t}(\theta)\)</span>是非常稀疏的</li></ul><p><span class="math display">\[\nabla_{\theta} J_{t}(\theta)=\left[\begin{array}{l}0 \\\vdots \\\nabla_{v_{\text {like }}} \\\vdots \\0 \\\nabla_{u_{I}} \\\vdots \\\nabla_{u_{\text {learning }}} \\\vdots\end{array}\right] \in \mathbb{R}^{2 d V}\]</span></p><p>上面提到的稀疏性问题，一种解决方式是我们<strong>只更新实际出现的向量</strong></p><ul><li>需要稀疏矩阵更新操作来只更新矩阵<spanclass="math inline">\(U\)</span>和<spanclass="math inline">\(V\)</span>中的特定行</li><li>需要保留单词向量的哈希/散列</li></ul><p>如果有数百万个单词向量，并且进行分布式计算，我们无需再传输巨大的更新信息（数据传输有成本）</p><h2 id="word2vec的更多细节">1.3 Word2vec的更多细节</h2><p>word2vec有两个模型变体：</p><ul><li>1.Skip-grams (SG)：输入中心词并预测上下文中的单词</li><li>2.Continuous Bag of Words(CBOW)：输入上下文中的单词并预测中心词</li></ul><p>之前一直使用naive的softmax(简单但代价很高的训练方法)，其实可以使用负采样方法加快训练速率</p><h2 id="负例采样的skip-gram模型作业2">1.4负例采样的skip-gram模型（作业2）</h2><p>softmax中用于归一化的分母的计算代价太高</p><ul><li>我们将在作业2中实现使用 negative sampling/负例采样方法的 skip-gram模型。</li><li>使用一个 true pair (中心词及其上下文窗口中的词)与几个 noise pair(中心词与随机词搭配) 形成的样本，训练二元逻辑回归。</li></ul><p>原文中的(最大化)目标函数是：<spanclass="math inline">\(J(\theta)=\frac{1}{T} \sum_{t=1}^{T}J_{t}(\theta)\)</span> <span class="math display">\[J_{t}(\theta)=\log \sigma\left(u_{o}^{T} v_{c}\right)+\sum_{i=1}^{k}\mathbb{E}_{j \sim P(w)}\left[\log \sigma\left(-u_{j}^{T}v_{c}\right)\right]\]</span></p><ul><li>左侧为sigmoid函数(大家会在后续的内容里经常见到它)</li><li>我们要最大化2个词共现的概率</li></ul><p>本课以及作业中的目标函数是: <span class="math display">\[J_{n e g-s a m p l e}\left(\boldsymbol{o}, \boldsymbol{v}_{c},\boldsymbol{U}\right)=-\log \left(\sigma\left(\boldsymbol{u}_{o}^{\top}\boldsymbol{v}_{c}\right)\right)-\sum_{k=1}^{K} \log\left(\sigma\left(-\boldsymbol{u}_{k}^{\top}\boldsymbol{v}_{c}\right)\right)\]</span></p><ul><li>我们取<span class="math inline">\(K\)</span>个负例采样</li><li>最大化窗口中包围「中心词」的这些词语出现的概率，而最小化其他没有出现的随机词的概率</li><li><span class="math inline">\(P(w)=U(w)^{3 / 4} /Z\)</span>我们用左侧的公式进行抽样，其中<spanclass="math inline">\(U(w)\)</span>​是 unigram 分布</li><li>通过 3/4 次方，相对减少常见单词的频率，增大稀有词的概率</li><li><span class="math inline">\(Z\)</span>用于生成概率分布</li></ul><h1 id="计数与共线矩阵">2 计数与共线矩阵</h1><h2 id="共现矩阵与词向量构建">2.1 共现矩阵与词向量构建</h2><p>在自然语言处理里另外一个构建词向量的思路是借助于<strong>共现矩阵</strong>（我们设其为<spanclass="math inline">\(X\)</span>），我们有两种方式，可以基于窗口（window）或者全文档（fulldocument)统计：</p><ul><li><strong>Window</strong>：与word2vec类似，在每个单词周围都使用Window，包括语法(POS)和语义信息</li><li><strong>Word-document</strong>共现矩阵的基本假设是在同一篇文章中出现的单词更有可能相互关联。假设单词<spanclass="math inline">\(i\)</span>出现在文章<spanclass="math inline">\(j\)</span>中，则矩阵元素<spanclass="math inline">\(X_{ij}\)</span>加一，当我们处理完数据库中的所有文章后，就得到了矩阵<spanclass="math inline">\(X\)</span>，其大小为<spanclass="math inline">\(|V| \times M\)</span>，其中<spanclass="math inline">\(|V|\)</span>为词汇量，而<spanclass="math inline">\(M\)</span>为文章数。这一构建单词文章co-occurrencematrix的方法也是经典的Latent SemanticAnalysis所采用的【语义分析】。</li></ul><h2 id="基于窗口的共现矩阵示例">2.2 基于窗口的共现矩阵示例</h2><p>利用某个定长窗口(通常取5-10)中单词与单词同时出现的次数，来产生基于窗口的共现矩阵。</p><p>下面以窗口长度为1来举例，假设我们的数据包含以下几个句子：</p><ul><li>I like deep learning.</li><li>I like NLP.</li><li>I enjoy flying.</li></ul><p>我们可以得到如下的词词共现矩阵（word-word co-occurrence matrix）</p><p><img src="/img/nlp/第二讲/1.png" /></p><h2 id="基于直接的共现矩阵构建词向量的问题">2.3基于直接的共现矩阵构建词向量的问题</h2><p>直接基于共现矩阵构建词向量，会有一些明显的问题，如下：</p><ul><li>使用共现次数衡量单词的相似性，但是会随着词汇量的增加而增大矩阵的大小。</li><li>需要很多空间来存储这一高维矩阵。</li><li>后续的分类模型也会由于矩阵的稀疏性而存在稀疏性问题，使得效果不佳。</li></ul><h2 id="解决方案低维向量">2.4 解决方案：低维向量</h2><p>针对上述问题，我们的一个处理方式是降维，获得低维稠密向量。</p><ul><li>通常降维到(25-1000)维，和word2vec类似</li></ul><p>如何降维呢？</p><h2 id="方法1对x进行降维作业1">2.5 方法1：对X进行降维（作业1）</h2><p>可以使用奇异值分解（SVD）方法将共现矩阵<spanclass="math inline">\(X\)</span>分解为<span class="math inline">\(U\Sigma V^{T}\)</span>，其中：</p><ul><li><spanclass="math inline">\(\Sigma\)</span>是对角线矩阵，对角线上的值是矩阵的奇异值</li><li><span class="math inline">\(U\)</span>，<spanclass="math inline">\(V\)</span>是对应于行和列的正交基</li></ul><p>为了减少尺度同时尽量保存有效信息，可保留对角矩阵的最大的<spanclass="math inline">\(k\)</span>个值，并将矩阵<spanclass="math inline">\(U\)</span>，<spanclass="math inline">\(V\)</span>的相应的行列保留。</p><ul><li>这是经典的线性代数算法，对于大型矩阵而言，计算代价昂贵。</li></ul><h2 id="词向量svd分解的python代码示例">2.6词向量SVD分解的python代码示例</h2><p><img src="/img/nlp/第二讲/2.png" /></p><p>将向量进行可视化</p><p><img src="/img/nlp/第二讲/3.png" /></p><h2 id="论文讲解">2.7 论文讲解</h2><h3 id="hacks-to-x-several-used-in-rohde-et-al.-2005">Hacks to X(several used in Rohde et al. 2005)</h3><p>按比例调整 counts 会很有效</p><ul><li>对高频词进行缩放(语法有太多的影响)<ul><li>使用log进行缩放</li><li><span class="math inline">\(\min (X, t), t \approx 100\)</span></li><li>直接全部忽视</li></ul></li><li>在基于window的计数中，提高更加接近的单词的计数</li><li>使用Person相关系数</li></ul><h2 id="词向量分布探究">2.8 词向量分布探究</h2><p>如果对词向量进行空间分布，会发现同一个词汇的附近分布着它不同时态语态的单词：</p><ul><li><span class="math inline">\(dirve \to deriver\)</span></li><li><span class="math inline">\(swim \to swimmer\)</span></li><li><span class="math inline">\(teach \to teacher\)</span></li></ul><p>在向量中出现的有趣的句法模式：语义向量基本上是线性组件，虽然有一些摆动，但是基本是存在动词和动词实施者的方向。</p><h2 id="基于计数-vs.-基于预估">2.9 基于计数 VS. 基于预估</h2><p>我们来总结一下基于共现矩阵计数和基于预估模型两种得到词向量的方式</p><p><strong>基于计数</strong>：使用整个矩阵的全局统计数据来直接估计</p><ul><li><strong>优点</strong>：训练快速；统计数据高效利用</li><li><strong>缺点</strong>：主要用于捕捉单词相似性；对大量数据给予比例失调的重视</li></ul><p><strong>基于预估模型</strong>：定义概率分布并试图预测单词</p><ul><li><strong>优点</strong>：提高其他任务的性能；能捕获除了单词相似性以外的复杂的模式</li><li><strong>缺点</strong>：随语料库增大会增大规模；统计数据的低效使用（采样是对统计数据的低效使用）</li></ul><h1 id="glove模型">3 GloVe模型</h1><h2 id="论文讲解-1">3.1 论文讲解</h2><h3 id="encoding-meaning-in-vector-differences">3.1.1 Encoding meaningin vector differences</h3><p>GloVe模型关键思想：共现概率的比值可以对meaningcomponent进行编码。将两个流派的想法结合起来，在神经网络中使用计数矩阵。</p><p><img src="/img/nlp/第二讲/4.png" /></p><p>例如我们想区分热力学上两种不同状态ice冰与蒸汽steam，如果只是看概率则数值很小，不能透露有效的信息，但是他们的比值比较大，所以使用比值更能体现信息。图中可以看出solid更常来描述ice的状态而不是steam，所以solid在ice的上下文中出现的几率更大。对于gas则恰恰相反，而对于water这种描述ice与steam均可或者fashion这种与两者都没什么联系的单词，则比值接近于1。所以相较于单纯的共现概率，实际上共现概率的相对比值更有意义。</p><h3id="combining-the-best-of-both-worlds-glove-pennington-et-al.-emnlp-2014">3.1.2Combining the best of both worlds GloVe [Pennington et al., EMNLP2014]</h3><p><span class="math display">\[w_i \cdot w_j = \log P(i|j)\]</span></p><p><span class="math display">\[J=\sum_{i, j=1}^{V} f\left(X_{i j}\right)\left(w_{i}^{T}\tilde{w}_{j}+b_{i}+\tilde{b}_{j}-\log X_{i j}\right)^{2}\]</span></p><ul><li>训练快速</li><li>可以扩展到大型语料库</li><li>即使是小语料库和小向量，性能也很好</li></ul><h2 id="glove的一些结果展示">3.2 GloVe的一些结果展示</h2><p>下图是一个GloVe词向量示例，我们通过GloVe得到的词向量，我们可以找到frog（青蛙）最接近的一些词汇，可以看出它们本身是很类似的动物。</p><p><img src="/img/nlp/第二讲/5.png" /></p><h1 id="词向量估计">4 词向量估计</h1><h2 id="如何评估词向量">4.1 如何评估词向量？</h2><p>我们如何评估词向量呢，有内在和外在两种方式：</p><ul><li><strong>内在评估方式</strong><ul><li>对特定/中间子任务进行评估</li><li>计算速度快</li><li>有助于理解这个系统</li><li>不清楚是否真的有用，除非与实际任务建立了相关性</li></ul></li><li><strong>外部任务方式</strong><ul><li>对真实任务（如下游NLP任务）的评估</li><li>计算精确度可能需要很长时间</li><li>不清楚子系统问题所在，是交互还是其他子系统问题</li><li>如果用另一个子系统替换一个子系统可以提高精确度</li></ul></li></ul><h2 id="内在词向量评估">4.2 内在词向量评估</h2><p>一种内在词向量评估方式是「<strong>词向量类比</strong>」：对于具备某种关系的词对a,b，在给定词c的情况下，找到具备类似关系的词d<span class="math display">\[a: b:: c: ? \rightarrow d=\arg \max _{i}\frac{\left(x_{b}-x_{a}+x_{c}\right)^{T}x_{i}}{\left\|x_{b}-x_{a}+x_{c}\right\|}\]</span></p><ul><li>通过加法后的余弦距离是否能很好地捕捉到直观的语义和句法类比问题来评估单词向量</li><li>从搜索中丢弃输入的单词</li><li>问题:如果有信息但不是线性的怎么办？</li></ul><h2 id="glove可视化效果">4.3 Glove可视化效果</h2><p>下图为GloVe得到的词向量空间分布，我们对词向量进行减法计算，可以发现类比的词对有相似的距离。</p><p>brother – sister, man – woman, king - queen</p><p><img src="/img/nlp/第二讲/6.png" /></p><h2 id="类比任务评估与超参数">4.4 类比任务评估与超参数</h2><p><img src="/img/nlp/第二讲/7.png" /></p><p><img src="/img/nlp/第二讲/8.png" /></p><ul><li>数据集越大越好，并且维基百科数据集比新闻文本数据集要好</li><li>300是一个很好的词向量维度</li></ul><h2 id="另一个内在的词向量评估">4.5 另一个内在的词向量评估</h2><p><img src="/img/nlp/第二讲/9.png" /></p><h2 id="相关性评估">4.6 相关性评估</h2><h3 id="section"><img src="/img/nlp/第二讲/10.png" /></h3><h1 id="word-senses">5 word senses</h1><h2 id="词义与词义歧义">5.1 词义与词义歧义</h2><p>大多数单词都是多义的</p><ul><li>特别是常见单词</li><li>特别是存在已久的单词</li></ul><p>例如：pike</p><p>那么，词向量是总体捕捉了所有这些信息，还是杂乱在一起了呢？</p><h2 id="pike的不同含义示例">5.2 pike的不同含义示例</h2><p><img src="/img/nlp/第二讲/11.png" /></p><h2 id="论文讲解-2">5.3 论文讲解</h2><h3id="improving-word-representations-via-global-context-and-multiple-word-prototypes-huang-et-al.-2012">5.3.1Improving Word Representations Via Global Context And Multiple WordPrototypes (Huang et al. 2012)</h3><p><img src="/img/nlp/第二讲/12.png" /></p><p>将常用词的所有上下文进行聚类，通过该词得到一些清晰的簇，从而将这个常用词分解为多个单词，例如bank1、bank2</p><h3id="linear-algebraic-structure-of-word-senses-with-applications-to-polysemy">5.3.2Linear Algebraic Structure of Word Senses, with Applications toPolysemy</h3><ul><li>单词在标准单词嵌入(如word2vec)中的不同含义以线性叠加(加权和)的形式存在</li></ul><p><span class="math display">\[v_{pike} = \alpha_1 v_{pike_1} + \alpha_2 v_{pike_2} + \alpha_3v_{pike_3}\]</span></p><ul><li>其中，<span class="math inline">\(\alpha =\frac{f_{1}}{f_{1}+f_{2}+f_{3}}\)</span></li></ul><p>令人惊讶的结果：</p><ul><li>只是加权平均值就已经可以获得很好的效果</li><li>由于从稀疏编码中得到的概念，你实际上可以将感官分离出来(前提是它们相对比较常见)</li></ul><h2 id="外向词向量评估">5.4 外向词向量评估</h2><ul><li>单词向量的外部评估：词向量可以应用于NLP的很多下游任务</li><li>一个例子是在命名实体识别任务中，寻找人名、机构名、地理位置名，词向量非常有帮助</li></ul><p><img src="/img/nlp/第二讲/13.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
      <category>NLP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回溯</title>
    <link href="/2022/05/03/%E5%9B%9E%E6%BA%AF/"/>
    <url>/2022/05/03/%E5%9B%9E%E6%BA%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="电话号码的字母组合">17、电话号码的字母组合</h2><p><img src="/img/LeetCode/字符串/17.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        <span class="hljs-keyword">if</span> digits == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> []<br><br>        phoneMap = &#123;<br>        <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>        <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;def&#x27;</span>,<br>        <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-string">&#x27;ghi&#x27;</span>,<br>        <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-string">&#x27;jkl&#x27;</span>,<br>        <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-string">&#x27;mno&#x27;</span>,<br>        <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-string">&#x27;pqrs&#x27;</span>,<br>        <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-string">&#x27;tuv&#x27;</span>,<br>        <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-string">&#x27;wxyz&#x27;</span>,   <br>        &#125;<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">index: <span class="hljs-built_in">int</span></span>):<span class="hljs-comment"># 回溯</span><br>            <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(digits):<br>                combinations.append(<span class="hljs-string">&#x27;&#x27;</span>.join(combination))<br>            <span class="hljs-keyword">else</span>:<br>                digit = digits[index]<br>                <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> phoneMap[digit]:<br>                    combination.append(ch)<br>                    backtrack(index + <span class="hljs-number">1</span>)<br>                    combination.pop()<br><br>        combination = <span class="hljs-built_in">list</span>()<br>        combinations = <span class="hljs-built_in">list</span>()<br>        backtrack(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">return</span> combinations<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一讲-NLP介绍与词向量初步</title>
    <link href="/2022/05/01/%E7%AC%AC%E4%B8%80%E8%AE%B2-NLP%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%AF%8D%E5%90%91%E9%87%8F%E5%88%9D%E6%AD%A5/"/>
    <url>/2022/05/01/%E7%AC%AC%E4%B8%80%E8%AE%B2-NLP%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%AF%8D%E5%90%91%E9%87%8F%E5%88%9D%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="自然语言与词汇含义">1 自然语言与词汇含义</h1><h2 id="如何在计算机里表达词的意义">1.1 如何在计算机里表达词的意义</h2><p>要使用计算机处理文本词汇，一种处理方式是<strong>WordNet</strong>：即构建一个包含同义词集和上位词(“isa”关系)的列表的辞典。英文当中确实有这样一个wordnet，我们在安装完NLTK工具库和下载数据包后可以使用，对应的 python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nltk.corpus <span class="hljs-keyword">import</span> wordnet <span class="hljs-keyword">as</span> wn<br>poses = &#123; <span class="hljs-string">&#x27;n&#x27;</span>:<span class="hljs-string">&#x27;noun&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>:<span class="hljs-string">&#x27;verb&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>:<span class="hljs-string">&#x27;adj (s)&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;adj&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>:<span class="hljs-string">&#x27;adv&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> synset <span class="hljs-keyword">in</span> wn.synsets(<span class="hljs-string">&quot;good&quot;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(poses[synset.pos()], <span class="hljs-string">&quot;, &quot;</span>.join([l.name() <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> synset.lemmas()])))<br>        <br><span class="hljs-keyword">from</span> nltk.corpus <span class="hljs-keyword">import</span> wordnet <span class="hljs-keyword">as</span> wn<br>panda = wn.synset(<span class="hljs-string">&quot;panda.n.01&quot;</span>)<br>hyper = <span class="hljs-keyword">lambda</span> s: s.hypernyms()<br><span class="hljs-built_in">list</span>(panda.closure(hyper))<br></code></pre></div></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">noun: good<br>noun: good, goodness<br>noun: good, goodness<br>noun: commodity, trade_good, good<br>adj: good<br>adj (sat): full, good<br>adj: good<br>adj (sat): estimable, good, honorable, respectable<br>adj (sat): beneficial, good<br>adj (sat): good<br>adj (sat): good, just, upright<br>…<br>adverb: well, good<br>adverb: thoroughly, soundly, good<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[Synset(&#x27;procyonid.n.01&#x27;),<br>Synset(&#x27;carnivore.n.01&#x27;),<br>Synset(&#x27;placental.n.01&#x27;),<br>Synset(&#x27;mammal.n.01&#x27;),<br>Synset(&#x27;vertebrate.n.01&#x27;),<br>Synset(&#x27;chordate.n.01&#x27;),<br>Synset(&#x27;animal.n.01&#x27;),<br>Synset(&#x27;organism.n.01&#x27;),<br>Synset(&#x27;living_thing.n.01&#x27;),<br>Synset(&#x27;whole.n.02&#x27;),<br>Synset(&#x27;object.n.01&#x27;),<br>Synset(&#x27;physical_entity.n.01&#x27;),<br>Synset(&#x27;entity.n.01&#x27;)]<br></code></pre></div></td></tr></table></figure><h2 id="wordnet的问题">1.2 WordNet的问题</h2><ul><li><p>作为一个资源很好，但忽略了细微差别。例如“proficient”被列为“good”的同义词，这只是在一些上下文中是正确的。</p></li><li><p>缺少单词的新含义，难以持续更新。</p></li><li><p>是主观的，需要人们来创造和调整，无法计算单词相似度。</p></li></ul><h2 id="文本词汇的离散表征">1.3 文本(词汇)的离散表征</h2><p>在传统的自然语言处理中，我们会对文本做离散表征，把词语看作离散的符号：例如hotel、conference、motel等。</p><p>one-hot vector是只有一个1，其余全为零的稀疏向量，单词可以通过one-hotvector来表示： <span class="math display">\[\text { motel }=\left[\begin{array}{lllllllllllllll}0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp;0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\end{array}\right]\]</span></p><p><span class="math display">\[\text { hotel }=\left[\begin{array}{lllllllllllllll}0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp;0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\end{array}\right]\]</span></p><p>在one-hot vector中向量维度 = 词汇量（如500，000）</p><h2 id="离散表征的问题">1.4 离散表征的问题</h2><p>在上述的独热向量离散表征里，所有词向量是正交的，这是一个很大的问题。对于独热向量，没有关于相似性概念，并且向量维度过大。</p><p>对于上述问题有一些解决思路：</p><ul><li>①使用类似WordNet的工具中的列表，获得相似度，但会因不够完整而失败</li><li>② 通过大量数据学习词向量本身相似性，获得更精确的稠密词向量编码</li></ul><h2 id="基于上下文的词汇表征">1.5 基于上下文的词汇表征</h2><p><strong>近年来在深度学习中比较有效的方式是基于上下文的词汇表征</strong>。它的<strong>核心想法</strong>是：一个单词的意思是由经常出现在它附近的单词给出的</p><p>这是现代统计NLP最成功的理念之一，总体思路有点物以类聚，人以群分的感觉。</p><ul><li>当一个单词<spanclass="math inline">\(w\)</span>出现在文本中时，它的上下文是出现在其附近的一组单词(在一个固定大小的窗口中)</li><li>基于海量数据，使用<spanclass="math inline">\(w\)</span>的许多上下文来构建<spanclass="math inline">\(w\)</span>的表示</li></ul><h1 id="word-vectors">2 Word Vectors</h1><h2 id="词向量表示">2.1 词向量表示</h2><p><strong>Word2vec</strong> (Mikolov et al.2013)是一个学习词向量表征的框架。</p><ul><li><strong>核心思路</strong>如下：<ul><li>基于海量文本语料库构建</li><li>词汇表中的每个单词都由一个向量表示（学习完成后会固定）</li><li>对应语料库文本中的每个位置<spanclass="math inline">\(t\)</span>，有一个中心词<spanclass="math inline">\(c\)</span>和一些上下文(“外部”)单词<spanclass="math inline">\(o\)</span></li><li>使用<span class="math inline">\(c\)</span>和<spanclass="math inline">\(o\)</span>的词向量来计算概率<spanclass="math inline">\(P(o|c)\)</span>，即给定中心词推断上下文词汇的概率（反之亦然）</li><li>不断调整词向量来最大化这个概率</li></ul></li></ul><p><img src="/img/nlp/3.png" /></p><h1 id="word2vec-目标函数">3 Word2vec 目标函数</h1><h2 id="似然函数">3.1 似然函数</h2><p>对于每个位置t = 1, … , T, 在大小为<spanclass="math inline">\(m\)</span>的固定窗口内预测上下文单词，给定中心词<spanclass="math inline">\(w_j\)</span>，似然函数可以表示为： <spanclass="math display">\[Likelihood = L(\theta) = \prod_{t=1}^{T} \prod_{\substack{-m \leq j \leqm \\ j \neq 0}}P(w_{t+j}|w_t;\theta)\]</span></p><p>上述公式中，<spanclass="math inline">\(\theta\)</span>为模型包含的所有待优化权重变量</p><h2 id="目标函数">3.2 目标函数</h2><p>对应上述似然函数的目标函<spanclass="math inline">\(J(\theta)\)</span>可以取作(平均)负对数似然： <spanclass="math display">\[Likelihood=-\frac1T \log L(\theta)=-\frac1T \sum_{t=1}^{T}\sum_{\substack{-m \leq j \leq m \\ j \neq 0}} \logP(w_{t+j}|w_t;\theta)\]</span></p><p>注意：</p><ul><li>目标函数<spanclass="math inline">\(J(\theta)\)</span>有时也被称为“<strong>代价函数</strong>”或“<strong>损失函数</strong>”</li><li>最小化目标函数与最大化似然函数（预测概率/精度）<strong>两者等价</strong></li></ul><p>得到目标函数后，我们希望最小化目标函数，那我们如何计算<spanclass="math inline">\(P(w_{t+j}|w_t;\theta)\)</span>?</p><p>对于每个词<span class="math inline">\(w\)</span>都会用两个向量：</p><ul><li>当<spanclass="math inline">\(w\)</span>是中心词时，我们标记词向量为<spanclass="math inline">\(v_w\)</span></li><li>当<spanclass="math inline">\(w\)</span>是上下文词时，我们标记词向量为<spanclass="math inline">\(u_w\)</span></li></ul><p>则对于一个中心词<spanclass="math inline">\(c\)</span>和一个上下文词<spanclass="math inline">\(o\)</span>，我们有如下概率计算公式 <spanclass="math display">\[P(o \mid c)=\frac{\exp \left(u_{o}^{T} v_{c}\right)}{\sum_{w \in V} \exp\left(u_{w}^{T} v_{c}\right)}\]</span></p><ul><li>对<spanclass="math inline">\(u_o^Tv_c\)</span>是将两个向量进行点积，为了计算两个词向量的相似度，点积的结果越大，那么相似度越大。</li><li>模型的训练正是为了使得具有相似上下文的单词，具有相似的向量</li><li>点积是计算相似性的一种简单方法，在注意力机制中常使用点积计算Score</li></ul><h1 id="word2vec预测函数">4 Word2vec预测函数</h1><p>这也就是softmax function(<spanclass="math inline">\(R^n\Rightarrow(0,1)^n\)</span>​)的一个例子，将<spanclass="math inline">\(x_i\)</span>映射到<spanclass="math inline">\(p_i\)</span>： <span class="math display">\[\operatorname{softmax}\left(x_{i}\right)=\frac{\exp\left(x_{i}\right)}{\sum_{j=1}^{n} \exp \left(x_{j}\right)}=p_{i}\]</span> 为了训练模型，我们就要找出参数最小化loss函数</p><ul><li><p>Recall：<spanclass="math inline">\(\theta\)</span>通过一个长向量来代表所有的模型参数</p></li><li><p>在我们的例子中，对于d维向量和V个单词，我们得出：</p></li><li><p><span class="math display">\[\theta=\left[\begin{array}{l}v_{\text {aardvark }} \\v_{a} \\\vdots \\v_{z e b r a} \\u_{a a r d v a r k} \\u_{a} \\\vdots \\u_{z e b r a}\end{array}\right] \in \mathbb{R}^{2 d V}\]</span></p></li><li><p>所以我们每个单词有两个向量</p></li></ul><p>我们就需要计算所有向量的梯度进行梯度下降算法来最小化loss函数</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
      <category>NLP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针</title>
    <link href="/2022/05/01/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2022/05/01/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h2 id="盛水最多的容器">11、盛水最多的容器</h2><p><img src="/img/LeetCode/数组及数学/3.png" /></p><p>我们使用双指针的思想，两个指针分别为数组的头尾结点，每轮都进行面积的计算，并且每轮只移动较小结点的指针。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxArea</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(height)<br>        left = <span class="hljs-number">0</span>    <span class="hljs-comment"># 左指针</span><br>        right = n - <span class="hljs-number">1</span>   <span class="hljs-comment"># 右指针</span><br>        max_s = <span class="hljs-number">0</span>   <span class="hljs-comment"># 面积最大值</span><br>        s = <span class="hljs-number">0</span>   <span class="hljs-comment"># 面积</span><br>        l = <span class="hljs-number">0</span>   <span class="hljs-comment"># 边长</span><br>        <span class="hljs-keyword">while</span> right &gt; left:<br>            <span class="hljs-keyword">if</span> height[left] &gt; height[right]:<br>                l = height[right]<br>            <span class="hljs-keyword">else</span>:<br>                l = height[left]<br>            s = (right - left) * l<br>            <span class="hljs-keyword">if</span> s &gt; max_s:<br>                max_s = s<br>            <span class="hljs-keyword">if</span> height[left] &gt; height[right]:<br>                right = right - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                left = left + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> max_s<br></code></pre></div></td></tr></table></figure><h2 id="三数之和">15、三数之和</h2><p><img src="/img/LeetCode/数组及数学/15.png" /></p><p>采用双指针的思想，为了不使三元组重复，先对数组进行排序。当确定了第一个元素，只需要对剩下元素进行设置左指针和右指针，如果三元组大与0，右指针就左移一位，反之亦然。如果三元组之和刚好等于0，就需要左指针和右指针都移动一位。这时候还会出现重复问题，所以需要判断此时遍历的元素和之前的是否相同，如果相同就要跳过。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        nums.sort()<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        ans = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<span class="hljs-comment"># 固定其中一个元素</span><br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> nums[i] != nums[i - <span class="hljs-number">1</span>]:<br>                k = n - <span class="hljs-number">1</span><br>                j = i + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> k &gt; j:<span class="hljs-comment"># 进行双指针遍历</span><br>                    <span class="hljs-keyword">if</span> k != n - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[k] == nums[k + <span class="hljs-number">1</span>]:<span class="hljs-comment"># 如果右指针之前出现过就跳过</span><br>                        k = k - <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> j != i + <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[j] == nums[j - <span class="hljs-number">1</span>]:<span class="hljs-comment"># 如果左指针之前出现过就跳过</span><br>                        j = j + <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">continue</span><br>                    s = nums[i] + nums[j] + nums[k]<br>                    <span class="hljs-keyword">if</span> s == <span class="hljs-number">0</span>:<br>                        ans.append([nums[i], nums[j], nums[k]])<br>                        k = k - <span class="hljs-number">1</span><br>                        j = j + <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> s &gt; <span class="hljs-number">0</span>:<br>                        k = k - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> s &lt; <span class="hljs-number">0</span>:<br>                        j = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="最接近的三数之和">16、最接近的三数之和</h2><p><img src="/img/LeetCode/数组及数学/16.png" /></p><p>采用双指针的思想，先对数组进行排序。当确定了第一个元素，只需要对剩下元素进行设置左指针和右指针，如果三元组之和大于target，我们只需要将右节点左移一位，相反亦然。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSumClosest</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        nums.sort()<br>        min_num = <span class="hljs-number">10</span>**<span class="hljs-number">9</span><br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            k = n - <span class="hljs-number">1</span><br>            j = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> k &gt; j:<br>                s = nums[i] + nums[j] + nums[k]<br>                <span class="hljs-keyword">if</span> s == target:<br>                    <span class="hljs-keyword">return</span> s<br>                <span class="hljs-keyword">if</span> s &gt; target:<br>                    <span class="hljs-keyword">if</span> s - target &lt; min_num:<br>                        min_num = s - target<br>                        ans = s<br>                    k = k - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> s &lt; target:<br>                    <span class="hljs-keyword">if</span> target - s &lt; min_num:<br>                        min_num = target - s<br>                        ans = s<br>                    j = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="四数之和">18、四数之和</h2><p><img src="/img/LeetCode/数组及数学/18.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fourSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> nums == [] <span class="hljs-keyword">or</span> n &lt; <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> []<br>        nums.sort()<br>        ans = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[i + <span class="hljs-number">1</span>] + nums[i + <span class="hljs-number">2</span>] + nums[i + <span class="hljs-number">3</span>] &gt; target:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[n - <span class="hljs-number">1</span>] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">3</span>] &lt; target:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n - <span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> j != i + <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[j] == nums[j - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> nums[i] + nums[j] + nums[j + <span class="hljs-number">1</span>] + nums[j + <span class="hljs-number">2</span>] &gt; target:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> nums[i] + nums[n - <span class="hljs-number">1</span>] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">3</span>] &lt; target:<br>                    <span class="hljs-keyword">continue</span><br>                k = j + <span class="hljs-number">1</span><br>                l = n - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> k &lt; l:<br>                    <span class="hljs-built_in">sum</span> = nums[i] + nums[j] + nums[k] + nums[l]<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span> &lt; target:<br>                        k = k + <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">sum</span> &gt; target:<br>                        l = l - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">sum</span> == target:<br>                        ans.append([nums[i], nums[j], nums[k], nums[l]])<br>                        <span class="hljs-keyword">while</span> k &lt; l <span class="hljs-keyword">and</span> nums[k] == nums[k + <span class="hljs-number">1</span>]:<br>                            k = k + <span class="hljs-number">1</span><br>                        k = k + <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">while</span> k &lt; l <span class="hljs-keyword">and</span> nums[l] == nums[l - <span class="hljs-number">1</span>]:<br>                            l = l - <span class="hljs-number">1</span><br>                        l = l - <span class="hljs-number">1</span> <br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="删除链表的倒数第n个结点">19、删除链表的倒数第N个结点</h2><p><img src="/img/LeetCode/链表/19.png" /></p><p>采用双指针的思想，左右指针都为指向头节点，首先右指针向后遍历n个结点，最后让左右一起向后遍历直至右指针指向的为最后一个结点，这时候左指针指向的就是倒数第n个结点的前一个结点，就可以进行删除的操作了。</p><p>但是有一个特殊情况，如果删除的是头结点，上述不成立，所以要单独进行一个if判断，如果右指针向后遍历n个结点后为空，那么删除的就是头结点。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNthFromEnd</span>(<span class="hljs-params">self, head: ListNode, n: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        right = head<br>        left = head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            right = right.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> right == <span class="hljs-literal">None</span>:<span class="hljs-comment"># 如果要删除的是头结点</span><br>            left = left.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">return</span> left<br>        <span class="hljs-keyword">while</span> right.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span>:<br>            left = left.<span class="hljs-built_in">next</span><br>            right = right.<span class="hljs-built_in">next</span><br>        left.<span class="hljs-built_in">next</span> = left.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br></code></pre></div></td></tr></table></figure><h2 id="删除有序数组中的重复项">26、删除有序数组中的重复项</h2><p><img src="/img/LeetCode/数组及数学/26.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> nums == []:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        n = <span class="hljs-built_in">len</span>(nums)<br>        left, right = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> right &lt; n:<br>            <span class="hljs-keyword">if</span> nums[right] != nums[right - <span class="hljs-number">1</span>]:<br>                nums[left] = nums[right]<br>                left = left + <span class="hljs-number">1</span><br>            right = right + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2022/04/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2022/04/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h2 id="最长回文子串">4、最长回文子串</h2><p><img src="/img/LeetCode/字符串/2.png" /></p><p>本题使用的动态规划的思想，也就是说只有s[i+1:j-1]<em>s</em>[<em>i</em>+1:<em>j</em>−1] 是回文串，并且s<em>s</em> 的第 i<em>i</em> 和 j<em>j</em>个字母相同时，s[i:j]<em>s</em>[<em>i</em>:<em>j</em>] 才会是回文串。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:  <span class="hljs-comment"># 如果字符串长为1</span><br>            <span class="hljs-keyword">return</span> s<br>        <br>        <span class="hljs-built_in">max</span> = <span class="hljs-number">1</span><br>        left = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># dp[i][j]代表是s[i...j]是否为回文串</span><br>        dp = [[<span class="hljs-literal">False</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            dp[i][i] = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">for</span> L <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                right = L + i - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> right &gt;= n:<br>                    <span class="hljs-keyword">break</span><br>                <br>                <span class="hljs-keyword">if</span> s[i] != s[right]:<br>                    dp[i][right] = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">if</span> right - i &lt; <span class="hljs-number">3</span>:<br>                        dp[i][right] = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">else</span>:<br>                        dp[i][right] = dp[i + <span class="hljs-number">1</span>][right - <span class="hljs-number">1</span>]<br><br>                <span class="hljs-keyword">if</span> dp[i][right] <span class="hljs-keyword">and</span> L &gt; <span class="hljs-built_in">max</span>:<br>                    <span class="hljs-built_in">max</span> = L<br>                    left = i<br>        <span class="hljs-keyword">return</span> s[left:left+<span class="hljs-built_in">max</span>]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2022/04/29/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/04/29/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="无重复字符的最长子串">3、无重复字符的最长子串</h2><p><img src="/img/LeetCode/字符串/1.png" /></p><p>方法一：暴力解</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        occ = <span class="hljs-built_in">set</span>()<br>        n = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-comment"># rk为左指针，ans为无重复子串长度</span><br>        rk, ans = -<span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        flag = <span class="hljs-number">0</span>    <span class="hljs-comment"># 循环中无重复子串长度</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            rk = i<br>            flag = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> rk &lt; n <span class="hljs-keyword">and</span> s[rk] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> occ:<br>                occ.add(s[rk])<br>                flag = flag + <span class="hljs-number">1</span><br>                rk = rk + <span class="hljs-number">1</span><br>            ans = flag <span class="hljs-keyword">if</span> flag &gt; ans <span class="hljs-keyword">else</span> ans<br>            occ.clear()<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><p>方法二：</p><p>每次循环没必要把集合里的元素全部删除，可以每次只删除上一轮循环的最左边结点</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        occ = <span class="hljs-built_in">set</span>()<br>        n = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-comment"># rk为左指针，ans为无重复子串长度</span><br>        rk, ans = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        flag = <span class="hljs-number">0</span>    <span class="hljs-comment"># 循环中无重复子串长度</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span>:<br>                occ.remove(s[i - <span class="hljs-number">1</span>])<br>                flag = flag - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> rk &lt; n <span class="hljs-keyword">and</span> s[rk] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> occ:<br>                occ.add(s[rk])<br>                rk = rk + <span class="hljs-number">1</span><br>                flag = flag + <span class="hljs-number">1</span><br>            ans = flag <span class="hljs-keyword">if</span> flag &gt; ans <span class="hljs-keyword">else</span> ans<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="最长回文子串">4、最长回文子串</h2><p><img src="/img/LeetCode/字符串/2.png" /></p><p>本题使用的动态规划的思想，也就是说只有s[i+1:j-1]<em>s</em>[<em>i</em>+1:<em>j</em>−1] 是回文串，并且s<em>s</em> 的第 i<em>i</em> 和 j<em>j</em>个字母相同时，s[i:j]<em>s</em>[<em>i</em>:<em>j</em>] 才会是回文串。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:  <span class="hljs-comment"># 如果字符串长为1</span><br>            <span class="hljs-keyword">return</span> s<br>        <br>        <span class="hljs-built_in">max</span> = <span class="hljs-number">1</span><br>        left = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># dp[i][j]代表是s[i...j]是否为回文串</span><br>        dp = [[<span class="hljs-literal">False</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            dp[i][i] = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">for</span> L <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                right = L + i - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> right &gt;= n:<br>                    <span class="hljs-keyword">break</span><br>                <br>                <span class="hljs-keyword">if</span> s[i] != s[right]:<br>                    dp[i][right] = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">if</span> right - i &lt; <span class="hljs-number">3</span>:<br>                        dp[i][right] = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">else</span>:<br>                        dp[i][right] = dp[i + <span class="hljs-number">1</span>][right - <span class="hljs-number">1</span>]<br><br>                <span class="hljs-keyword">if</span> dp[i][right] <span class="hljs-keyword">and</span> L &gt; <span class="hljs-built_in">max</span>:<br>                    <span class="hljs-built_in">max</span> = L<br>                    left = i<br>        <span class="hljs-keyword">return</span> s[left:left+<span class="hljs-built_in">max</span>]<br></code></pre></div></td></tr></table></figure><h2 id="z字形变换">6、Z字形变换</h2><p><img src="/img/LeetCode/字符串/3.png" /></p><p>使用二维矩阵进行模拟：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, numRows: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">if</span> numRows == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> numRows &gt;= n:<br>            <span class="hljs-keyword">return</span> s<br>        t = <span class="hljs-number">2</span> * numRows - <span class="hljs-number">2</span><br>        col = (n + t - <span class="hljs-number">1</span>) // t * (numRows - <span class="hljs-number">1</span>)<br>        matrix = [[<span class="hljs-string">&#x27;&#x27;</span>] * col <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numRows)]<br>        x, y = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            matrix[x][y] = ch<br>            <span class="hljs-keyword">if</span> i % t &lt; numRows - <span class="hljs-number">1</span>:<br>                x = x + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                x = x - <span class="hljs-number">1</span><br>                y = y + <span class="hljs-number">1</span><br>        ans = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numRows):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col):<br>                <span class="hljs-keyword">if</span> matrix[i][j]:<br>                    ans = ans + matrix[i][j]<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="字符串转换整数">7、字符串转换整数</h2><p><img src="/img/LeetCode/字符串/4.png" /></p><p><img src="/img/LeetCode/字符串/5.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myAtoi</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        flag = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            <span class="hljs-keyword">if</span> ch != <span class="hljs-string">&#x27; &#x27;</span>:<br>                s = s[i:]<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            flag = <span class="hljs-literal">True</span><br>            s = s[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">elif</span> s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;+&#x27;</span>:<br>            s = s[<span class="hljs-number">1</span>:]<br>        a = <span class="hljs-number">0</span><br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            <span class="hljs-keyword">if</span> ch.isdigit() == <span class="hljs-literal">False</span>:<br>                <span class="hljs-keyword">break</span><br>            a = <span class="hljs-built_in">int</span>(ch)<br>            ans = ans * <span class="hljs-number">10</span> + a<br>        <span class="hljs-keyword">if</span> flag:<br>            ans = -<span class="hljs-number">1</span> * ans<br>        <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ans &lt; -(<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>):<br>            <span class="hljs-keyword">return</span> -(<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="最长公共前缀">14、最长公共前缀</h2><p><img src="/img/LeetCode/字符串/6.png" /></p><p>想法为横向对比，按照列表顺序开始逐步算法前x个字符串的最长前缀，直至得到最终的最长前缀</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        flag = strs[<span class="hljs-number">0</span>]<span class="hljs-comment"># 前几个字符串的最长前缀</span><br>        a = <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 本字符串与flag的最长前缀</span><br>        ans = <span class="hljs-string">&quot;&quot;</span><br>        n = <span class="hljs-built_in">len</span>(strs)<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<span class="hljs-comment"># 如果只有一个字符串，那就直接输出</span><br>            <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i, s <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(strs):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<span class="hljs-comment"># 如果是第一个字符串那就跳过</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> j, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<span class="hljs-comment"># 本字符串与flag进行比对</span><br>                <span class="hljs-keyword">if</span> j &lt; <span class="hljs-built_in">len</span>(flag) <span class="hljs-keyword">and</span> ch == flag[j]:<br>                    a = a + ch<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">break</span><br>            flag = a<br>            a = <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-keyword">if</span> i == n - <span class="hljs-number">1</span>:<span class="hljs-comment"># 如果是最后一个结点，那就是最终最长前缀了</span><br>                ans = flag<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="电话号码的字母组合">17、电话号码的字母组合</h2><p><img src="/img/LeetCode/字符串/17.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        <span class="hljs-keyword">if</span> digits == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> []<br><br>        phoneMap = &#123;<br>        <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>        <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;def&#x27;</span>,<br>        <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-string">&#x27;ghi&#x27;</span>,<br>        <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-string">&#x27;jkl&#x27;</span>,<br>        <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-string">&#x27;mno&#x27;</span>,<br>        <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-string">&#x27;pqrs&#x27;</span>,<br>        <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-string">&#x27;tuv&#x27;</span>,<br>        <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-string">&#x27;wxyz&#x27;</span>,   <br>        &#125;<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">index: <span class="hljs-built_in">int</span></span>):<span class="hljs-comment"># 回溯</span><br>            <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(digits):<br>                combinations.append(<span class="hljs-string">&#x27;&#x27;</span>.join(combination))<br>            <span class="hljs-keyword">else</span>:<br>                digit = digits[index]<br>                <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> phoneMap[digit]:<br>                    combination.append(ch)<br>                    backtrack(index + <span class="hljs-number">1</span>)<br>                    combination.pop()<br><br>        combination = <span class="hljs-built_in">list</span>()<br>        combinations = <span class="hljs-built_in">list</span>()<br>        backtrack(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">return</span> combinations<br></code></pre></div></td></tr></table></figure><h2 id="有效的括号">20、有效的括号</h2><p><img src="/img/LeetCode/字符串/20.png" /></p><p>采用了栈的思想，将符号依次入栈进行判断</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        stack = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;)&#x27;</span>:<br>                <span class="hljs-keyword">if</span> stack == []:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                temp = stack.pop()<br>                <span class="hljs-keyword">if</span> temp != <span class="hljs-string">&#x27;(&#x27;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">elif</span> ch == <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>                <span class="hljs-keyword">if</span> stack == []:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                temp = stack.pop()<br>                <span class="hljs-keyword">if</span> temp != <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">elif</span> ch == <span class="hljs-string">&#x27;]&#x27;</span>:<br>                <span class="hljs-keyword">if</span> stack == []:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                temp = stack.pop()<br>                <span class="hljs-keyword">if</span> temp != <span class="hljs-string">&#x27;[&#x27;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                stack.append(ch)<br>        <span class="hljs-keyword">if</span> stack:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure><h2 id="合并两个有序链表">21、合并两个有序链表</h2><p><img src="/img/LeetCode/字符串/21.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mergeTwoLists</span>(<span class="hljs-params">self, list1: <span class="hljs-type">Optional</span>[ListNode], list2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        head = ListNode(<span class="hljs-number">0</span>, <span class="hljs-literal">None</span>)<br>        temp = head<br>        first = list1<br>        second = list2<br>        <span class="hljs-keyword">while</span> first <span class="hljs-keyword">and</span> second:<br>            <span class="hljs-keyword">if</span> first.val &lt;= second.val:<br>                temp.<span class="hljs-built_in">next</span> = first<br>                temp = temp.<span class="hljs-built_in">next</span><br>                first = first.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">elif</span> first.val &gt; second.val:<br>                temp.<span class="hljs-built_in">next</span> = second<br>                temp = temp.<span class="hljs-built_in">next</span><br>                second = second.<span class="hljs-built_in">next</span><br>        <br>        temp.<span class="hljs-built_in">next</span> = first <span class="hljs-keyword">if</span> first <span class="hljs-keyword">else</span> second<br>        <br>        <span class="hljs-keyword">return</span> head.<span class="hljs-built_in">next</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2022/04/28/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2022/04/28/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="两数相加">1、两数相加</h2><p><img src="/img/LeetCode/哈希表/1.png" /></p><p>这样我们创建一个哈希表，对于每一个<code>x</code>，我们首先查询哈希表中是否存在<code>target - x</code>，然后将 <code>x</code>插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        hashtable = <span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> i, num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> target - num <span class="hljs-keyword">in</span> hashtable:<br>                <span class="hljs-keyword">return</span> [hashtable[target - num], i]<br>            <span class="hljs-keyword">else</span>:<br>                hashtable[num] = i<br>        <span class="hljs-keyword">return</span> []<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2022/04/28/%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/04/28/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="两数相加">2、两数相加</h2><p><img src="/img/LeetCode/链表/2.png" /></p><p>采用递归的思想，当某个链表当前节点存在下一个节点或进位符为1时，往下递归。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: <span class="hljs-type">Optional</span>[ListNode], l2: <span class="hljs-type">Optional</span>[ListNode], carryflag = <span class="hljs-number">0</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        n1, n2 = l1.val <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>, l2.val <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        s = n1 + n2 + carryflag<br>        val, carry_flag = s % <span class="hljs-number">10</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> s &gt; <span class="hljs-number">9</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        next1, next2 = l1.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>, l2.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> next1 <span class="hljs-keyword">or</span> next2 <span class="hljs-keyword">or</span> carry_flag:<br>            <span class="hljs-keyword">return</span> ListNode(val, self.addTwoNumbers(next1, next2, carry_flag))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> ListNode(val)<br></code></pre></div></td></tr></table></figure><h2 id="删除链表的倒数第n个结点">19、删除链表的倒数第N个结点</h2><p><img src="/img/LeetCode/链表/19.png" /></p><p>采用双指针的思想，左右指针都为指向头节点，首先右指针向后遍历n个结点，最后让左右一起向后遍历直至右指针指向的为最后一个结点，这时候左指针指向的就是倒数第n个结点的前一个结点，就可以进行删除的操作了。</p><p>但是有一个特殊情况，如果删除的是头结点，上述不成立，所以要单独进行一个if判断，如果右指针向后遍历n个结点后为空，那么删除的就是头结点。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNthFromEnd</span>(<span class="hljs-params">self, head: ListNode, n: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:<br>        right = head<br>        left = head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            right = right.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> right == <span class="hljs-literal">None</span>:<span class="hljs-comment"># 如果要删除的是头结点</span><br>            left = left.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">return</span> left<br>        <span class="hljs-keyword">while</span> right.<span class="hljs-built_in">next</span> != <span class="hljs-literal">None</span>:<br>            left = left.<span class="hljs-built_in">next</span><br>            right = right.<span class="hljs-built_in">next</span><br>        left.<span class="hljs-built_in">next</span> = left.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br></code></pre></div></td></tr></table></figure><h2 id="亮亮交换链表中的结点">24、亮亮交换链表中的结点</h2><p><img src="/img/LeetCode/链表/24.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">swapPairs</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">if</span> head == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        temp = ListNode(<span class="hljs-number">0</span>, head)<br>        first = temp<br>        second = temp.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">while</span> second <span class="hljs-keyword">and</span> second.<span class="hljs-built_in">next</span>:<br>            first.<span class="hljs-built_in">next</span> = second.<span class="hljs-built_in">next</span><br>            second.<span class="hljs-built_in">next</span> = second.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            first.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = second<br>            <br>            first = second<br>            second = second.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> temp.<span class="hljs-built_in">next</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组及数学</title>
    <link href="/2022/04/28/%E6%95%B0%E7%BB%84%E5%8F%8A%E6%95%B0%E5%AD%A6/"/>
    <url>/2022/04/28/%E6%95%B0%E7%BB%84%E5%8F%8A%E6%95%B0%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="整数反转">7、整数反转</h2><p><img src="/img/LeetCode/数组及数学/1.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        flag = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:<br>            flag = <span class="hljs-literal">True</span><br>            x = -<span class="hljs-number">1</span> * x<br>        a = <span class="hljs-number">0</span>   <span class="hljs-comment"># 除法余数</span><br>        <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>:<br>            a = x % <span class="hljs-number">10</span><br>            x = x // <span class="hljs-number">10</span><br>            ans = ans * <span class="hljs-number">10</span> + a<br>        <span class="hljs-keyword">if</span> flag:<br>            ans = -<span class="hljs-number">1</span> * ans<br>        <span class="hljs-keyword">if</span> ans &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> ans &lt; -(<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="回文数">9、回文数</h2><p><img src="/img/LeetCode/数组及数学/2.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        a = self.reverse(x) <span class="hljs-comment"># 整数反转</span><br>        <span class="hljs-keyword">if</span> a == x:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        a = <span class="hljs-number">0</span>   <span class="hljs-comment"># 除法余数</span><br>        <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>:<br>            a = x % <span class="hljs-number">10</span><br>            x = x // <span class="hljs-number">10</span><br>            ans = ans * <span class="hljs-number">10</span> + a<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="盛水最多的容器">11、盛水最多的容器</h2><p><img src="/img/LeetCode/数组及数学/3.png" /></p><p>我们使用双指针的思想，两个指针分别为数组的头尾结点，每轮都进行面积的计算，并且每轮只移动较小结点的指针。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxArea</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(height)<br>        left = <span class="hljs-number">0</span>    <span class="hljs-comment"># 左指针</span><br>        right = n - <span class="hljs-number">1</span>   <span class="hljs-comment"># 右指针</span><br>        max_s = <span class="hljs-number">0</span>   <span class="hljs-comment"># 面积最大值</span><br>        s = <span class="hljs-number">0</span>   <span class="hljs-comment"># 面积</span><br>        l = <span class="hljs-number">0</span>   <span class="hljs-comment"># 边长</span><br>        <span class="hljs-keyword">while</span> right &gt; left:<br>            <span class="hljs-keyword">if</span> height[left] &gt; height[right]:<br>                l = height[right]<br>            <span class="hljs-keyword">else</span>:<br>                l = height[left]<br>            s = (right - left) * l<br>            <span class="hljs-keyword">if</span> s &gt; max_s:<br>                max_s = s<br>            <span class="hljs-keyword">if</span> height[left] &gt; height[right]:<br>                right = right - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                left = left + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> max_s<br></code></pre></div></td></tr></table></figure><h2 id="整数转罗马数字">12、整数转罗马数字</h2><p><img src="/img/LeetCode/数组及数学/4.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    A = [<br>        (<span class="hljs-number">1000</span>, <span class="hljs-string">&quot;M&quot;</span>),<br>        (<span class="hljs-number">900</span>, <span class="hljs-string">&quot;CM&quot;</span>),<br>        (<span class="hljs-number">500</span>, <span class="hljs-string">&quot;D&quot;</span>),<br>        (<span class="hljs-number">400</span>, <span class="hljs-string">&quot;CD&quot;</span>),<br>        (<span class="hljs-number">100</span>, <span class="hljs-string">&quot;C&quot;</span>),<br>        (<span class="hljs-number">90</span>, <span class="hljs-string">&quot;XC&quot;</span>),<br>        (<span class="hljs-number">50</span>, <span class="hljs-string">&quot;L&quot;</span>),<br>        (<span class="hljs-number">40</span>, <span class="hljs-string">&quot;XL&quot;</span>),<br>        (<span class="hljs-number">10</span>, <span class="hljs-string">&quot;X&quot;</span>),<br>        (<span class="hljs-number">9</span>, <span class="hljs-string">&quot;IX&quot;</span>),<br>        (<span class="hljs-number">5</span>, <span class="hljs-string">&quot;V&quot;</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-string">&quot;IV&quot;</span>),<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;I&quot;</span>),<br>    ]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intToRoman</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        ans = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> value, s <span class="hljs-keyword">in</span> self.A:<br>            <span class="hljs-keyword">while</span> num &gt;= value:<br>                num = num - value<br>                ans = ans + s<br>            <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>        <br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="罗马数字转整数">13、罗马数字转整数</h2><p><img src="/img/LeetCode/数组及数学/5.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    A = &#123;<br>        <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">50</span>,<br>        <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">1000</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        n = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>            <span class="hljs-keyword">if</span> i &lt; n - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> self.A[ch] &lt; self.A[s[i+<span class="hljs-number">1</span>]]:<br>                ans = ans - self.A[ch]<br>            <span class="hljs-keyword">else</span>:<br>                ans = ans + self.A[ch]<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="三数之和">15、三数之和</h2><p><img src="/img/LeetCode/数组及数学/15.png" /></p><p>采用双指针的思想，为了不使三元组重复，先对数组进行排序。当确定了第一个元素，只需要对剩下元素进行设置左指针和右指针，如果三元组大与0，右指针就左移一位，反之亦然。如果三元组之和刚好等于0，就需要左指针和右指针都移动一位。这时候还会出现重复问题，所以需要判断此时遍历的元素和之前的是否相同，如果相同就要跳过。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        nums.sort()<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        ans = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<span class="hljs-comment"># 固定其中一个元素</span><br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> nums[i] != nums[i - <span class="hljs-number">1</span>]:<br>                k = n - <span class="hljs-number">1</span><br>                j = i + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> k &gt; j:<span class="hljs-comment"># 进行双指针遍历</span><br>                    <span class="hljs-keyword">if</span> k != n - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[k] == nums[k + <span class="hljs-number">1</span>]:<span class="hljs-comment"># 如果右指针之前出现过就跳过</span><br>                        k = k - <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> j != i + <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[j] == nums[j - <span class="hljs-number">1</span>]:<span class="hljs-comment"># 如果左指针之前出现过就跳过</span><br>                        j = j + <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">continue</span><br>                    s = nums[i] + nums[j] + nums[k]<br>                    <span class="hljs-keyword">if</span> s == <span class="hljs-number">0</span>:<br>                        ans.append([nums[i], nums[j], nums[k]])<br>                        k = k - <span class="hljs-number">1</span><br>                        j = j + <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> s &gt; <span class="hljs-number">0</span>:<br>                        k = k - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> s &lt; <span class="hljs-number">0</span>:<br>                        j = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="最接近的三数之和">16、最接近的三数之和</h2><p><img src="/img/LeetCode/数组及数学/16.png" /></p><p>采用双指针的思想，先对数组进行排序。当确定了第一个元素，只需要对剩下元素进行设置左指针和右指针，如果三元组之和大于target，我们只需要将右节点左移一位，相反亦然。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSumClosest</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        nums.sort()<br>        min_num = <span class="hljs-number">10</span>**<span class="hljs-number">9</span><br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            k = n - <span class="hljs-number">1</span><br>            j = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> k &gt; j:<br>                s = nums[i] + nums[j] + nums[k]<br>                <span class="hljs-keyword">if</span> s == target:<br>                    <span class="hljs-keyword">return</span> s<br>                <span class="hljs-keyword">if</span> s &gt; target:<br>                    <span class="hljs-keyword">if</span> s - target &lt; min_num:<br>                        min_num = s - target<br>                        ans = s<br>                    k = k - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> s &lt; target:<br>                    <span class="hljs-keyword">if</span> target - s &lt; min_num:<br>                        min_num = target - s<br>                        ans = s<br>                    j = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="四数之和">18、四数之和</h2><p><img src="/img/LeetCode/数组及数学/18.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fourSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> nums == [] <span class="hljs-keyword">or</span> n &lt; <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> []<br>        nums.sort()<br>        ans = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i - <span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[i + <span class="hljs-number">1</span>] + nums[i + <span class="hljs-number">2</span>] + nums[i + <span class="hljs-number">3</span>] &gt; target:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> nums[i] + nums[n - <span class="hljs-number">1</span>] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">3</span>] &lt; target:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n - <span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> j != i + <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nums[j] == nums[j - <span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> nums[i] + nums[j] + nums[j + <span class="hljs-number">1</span>] + nums[j + <span class="hljs-number">2</span>] &gt; target:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> nums[i] + nums[n - <span class="hljs-number">1</span>] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">3</span>] &lt; target:<br>                    <span class="hljs-keyword">continue</span><br>                k = j + <span class="hljs-number">1</span><br>                l = n - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> k &lt; l:<br>                    <span class="hljs-built_in">sum</span> = nums[i] + nums[j] + nums[k] + nums[l]<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span> &lt; target:<br>                        k = k + <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">sum</span> &gt; target:<br>                        l = l - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">sum</span> == target:<br>                        ans.append([nums[i], nums[j], nums[k], nums[l]])<br>                        <span class="hljs-keyword">while</span> k &lt; l <span class="hljs-keyword">and</span> nums[k] == nums[k + <span class="hljs-number">1</span>]:<br>                            k = k + <span class="hljs-number">1</span><br>                        k = k + <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">while</span> k &lt; l <span class="hljs-keyword">and</span> nums[l] == nums[l - <span class="hljs-number">1</span>]:<br>                            l = l - <span class="hljs-number">1</span><br>                        l = l - <span class="hljs-number">1</span> <br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></div></td></tr></table></figure><h2 id="删除有序数组中的重复项">26、删除有序数组中的重复项</h2><p><img src="/img/LeetCode/数组及数学/26.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> nums == []:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        n = <span class="hljs-built_in">len</span>(nums)<br>        left, right = <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> right &lt; n:<br>            <span class="hljs-keyword">if</span> nums[right] != nums[right - <span class="hljs-number">1</span>]:<br>                nums[left] = nums[right]<br>                left = left + <span class="hljs-number">1</span><br>            right = right + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> left<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pytorch</title>
    <link href="/2022/04/27/pytorch/"/>
    <url>/2022/04/27/pytorch/</url>
    
    <content type="html"><![CDATA[<h1 id="pytorch">PyTorch</h1><h2 id="dataset">1、DataSet</h2><p>DataSet：提供一种方法去获取数据及其label</p><p>使用的数据集为蜜蜂与蚂蚁的图像数据集，分别保存在dataset/train/bees以及dataset/train/ants</p><p>DataSet需要通过继承重载才能使用，使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, label_dir</span>):<span class="hljs-comment"># read data &amp; preprocess</span><br>        self.root_dir = root_dir    <span class="hljs-comment"># 根目录</span><br>        self.label_dir = label_dir  <span class="hljs-comment"># 标记目录</span><br>        self.path = os.path.join(self.root_dir, self.label_dir)     <span class="hljs-comment"># 地址相加</span><br>        self.img_path = os.listdir(self.path)   <span class="hljs-comment"># 生成图片文件列表</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<span class="hljs-comment"># returns one sample at a time</span><br>        img_name = self.img_path[index]   <span class="hljs-comment"># 文件名</span><br>        img_item_path = os.path.join(self.root_dir, self.label_dir, img_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        label = self.label_dir<br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<span class="hljs-comment"># returns the size of the dataset</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_path)<br><br><br><span class="hljs-comment"># 读取蚂蚁和蜜蜂的图片数据集</span><br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants&quot;</span><br>bees_label_dir = <span class="hljs-string">&quot;bees&quot;</span><br>ants_dataset = MyData(root_dir, ants_label_dir)<br>bees_dataset = MyData(root_dir, bees_label_dir)<br><br><span class="hljs-comment"># 将两个数据集进行合并，成为训练数据集</span><br>train_dataset = ants_dataset + bees_dataset<br></code></pre></div></td></tr></table></figure><h2 id="dataloader">2、DataLoader</h2><p>DataSet就相当于是一整个数据集，而DataLoader是取出其中一部分到神经网络中进行使用。</p><p>使用的是torchvision所提供的数据集。DataLoader中的参数分别释义如下：</p><ul><li>dataset：我们所使用的数据集，即dataset类型数据</li><li>batch_size：一次抓取多少个数据</li><li>shuffle：抓取时是否打乱顺序</li><li>num_workers：代表创建了多少个worker进程，0表示只有主进程去加载batch数据，1表示有一个worker进程加载batch数据</li><li>drop_last：无法整除时，最后剩余的几条数据要不要去除</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 准备的测试数据集</span><br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">False</span>)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;test_data&quot;</span>, imgs, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></div></td></tr></table></figure><p>最后显示结果如下：</p><p><img src="/img/pytorch/1.png" /></p><h2 id="tensorboard">3、TensorBoard</h2><p>我们可以通过TensorBoard可以查看图像</p><h3 id="输出函数图像">3.1输出函数图像</h3><p>首先我们通过TensorBoard来绘制y=x的图像，我们需要先生成一个实例，随后通过add_scalar()方法来添加，参数分别为名称，y轴的值，x轴的值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-comment"># 创建一个实例,存储在logs文件夹下</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><br><span class="hljs-comment"># y = x图像</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=x&quot;</span>, i, i)<br><br>writer.close()<br></code></pre></div></td></tr></table></figure><p>完成后，我们可以通过控制台输入如下指令来观看图像</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensorboard --logdir=logs<br></code></pre></div></td></tr></table></figure><p>这时候我们可以通过6006端口来查看图像，但是如果有很多tensorboard都要查看呢，我们可以选择自定义端口查看，例如我们要选择6007端口来查看，指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensorboard --logdir=logs --port=6007<br></code></pre></div></td></tr></table></figure><p><img src="/img/pytorch/2.png" /></p><p>这时候我们就可以看到y=x的图像</p><p>如果是y=2x的图像则需要修改代码为：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># y = 2x图像</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=2x&quot;</span>, <span class="hljs-number">2</span>*i, i)<br></code></pre></div></td></tr></table></figure><h3 id="输出图片">3.2输出图片</h3><p>我们也可以通过TensorBoard来显示我们的图片，通过TensorBoard的add_image()方法，参数分别为名称、图片（需要为tensor类型或者numpy类型）、global_step、类型（因为默认的类型为是（3，H，W）即通道(channel)为3，H为高度，W为宽度），代码如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 创建一个实例,存储在logs文件夹下</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>image_path = <span class="hljs-string">&quot;dataset/train/ants/0013035.jpg&quot;</span><br>img_PIL = Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array = np.array(img_PIL)<br><br>writer.add_image(<span class="hljs-string">&quot;test&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>)<br><br>writer.close()<br></code></pre></div></td></tr></table></figure><h2 id="神经网络的基本骨架">4、神经网络的基本骨架</h2><p>基本骨架是通过对nn.Module的继承重写实现的，大体实现如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br><br>res = MyModel()<br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br>output = res(x)<span class="hljs-comment"># 有__call__方法来调用，所以可以直接将x输入，不用我们来调用forward()方法</span><br><span class="hljs-built_in">print</span>(output)<br><br></code></pre></div></td></tr></table></figure><p>最后我们可以看到控制台输出为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor(2.)<br></code></pre></div></td></tr></table></figure><h2 id="卷积层">5、卷积层</h2><p>首先对于卷积层的学习，要了解卷积层的使用，我们先使用torch.nn.functional中的方法（一般都是使用torch.nn，其对functional进行了封装，这里是为了了解如何卷积）进行学习，首先要对conv2d的stride参数进行了解，stride时计算卷积时移动的步长，我们可以使用代码来了解：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><br>output2 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output2)<br></code></pre></div></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor([[[[10, 12, 12],<br>          [18, 16, 16],<br>          [13,  9,  3]]]])<br>tensor([[[[10, 12],<br>          [13,  3]]]])<br></code></pre></div></td></tr></table></figure><p>图示为：</p><p><img src="/img/pytorch/4.png" /></p><p>随后我们要学习的是conv2d中的padding参数，它是对输入图像的周围进行填充，并设置填充值：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">output3 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output3)<br></code></pre></div></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor([[[[ 1,  3,  4, 10,  8],<br>          [ 5, 10, 12, 12,  6],<br>          [ 7, 18, 16, 16,  8],<br>          [11, 13,  9,  3,  4],<br>          [14, 13,  9,  7,  4]]]])<br></code></pre></div></td></tr></table></figure><p>图示为：</p><p><img src="/img/pytorch/5.png" /></p><p>现在对卷积层的知识进行了学习后正式来时学习卷积层是如何搭建的，我们要使用的是torch.nn中的conv2d方法，其方法的参数解释在官方文档中如下：</p><ul><li><strong>in_channels</strong> (<ahref="https://docs.python.org/3/library/functions.html#int"><em>int</em></a>)– Number of channels in the input image</li><li><strong>out_channels</strong> (<ahref="https://docs.python.org/3/library/functions.html#int"><em>int</em></a>)– Number of channels produced by the convolution</li><li><strong>kernel_size</strong> (<ahref="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>or</em> <ahref="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a>)– Size of the convolving kernel</li><li><strong>stride</strong> (<ahref="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>or</em> <ahref="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a><em>,</em><em>optional</em>) – Stride of the convolution. Default: 1</li><li><strong>padding</strong> (<ahref="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>,</em><ahref="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a><em>or</em> <ahref="https://docs.python.org/3/library/stdtypes.html#str"><em>str</em></a><em>,</em><em>optional</em>) – Padding added to all four sides of the input.Default: 0</li><li><strong>padding_mode</strong> (*string**,* <em>optional</em>) –<code>'zeros'</code>, <code>'reflect'</code>, <code>'replicate'</code>or <code>'circular'</code>. Default: <code>'zeros'</code></li><li><strong>dilation</strong> (<ahref="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>or</em> <ahref="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a><em>,</em><em>optional</em>) – Spacing between kernel elements. Default: 1</li><li><strong>groups</strong> (<ahref="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>,</em><em>optional</em>) – Number of blocked connections from input channelsto output channels. Default: 1</li><li><strong>bias</strong> (<ahref="https://docs.python.org/3/library/functions.html#bool"><em>bool</em></a><em>,</em><em>optional</em>) – If <code>True</code>, adds a learnable bias to theoutput. Default: <code>True</code></li></ul><p><img src="/img/pytorch/3.png" /></p><p>我们简单的对图像进行卷积处理：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyModel, self).__init__()<br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>myModel = MyModel()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = myModel(imgs)<br>    <span class="hljs-comment"># print(imgs.shape)</span><br>    <span class="hljs-comment"># print(output.shape)</span><br><br>    <span class="hljs-comment"># torch.Size([64, 3, 32, 32])</span><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    <span class="hljs-comment"># torch.Size([64, 6, 32, 32]) -&gt; [xxx, 3, 32, 32]，因为out_channels为6没办法add进去</span><br>    output = torch.reshape(output, (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br><br>    step = step + <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>运行结果在tensorboard上显示为：</p><p><img src="/img/pytorch/6.png" /></p><p><img src="/img/pytorch/7.png" /></p><h2 id="池化层">6、池化层</h2><p>我们要使用的是torch.nn中的MaxPool2d方法，其中参数解释为：</p><ul><li><strong>kernel_size</strong> – the size of the window to take a maxover</li><li><strong>stride</strong> – the stride of the window. Default value is<code>kernel_size</code></li><li><strong>padding</strong> – implicit zero padding to be added on bothsides</li><li><strong>dilation</strong> – a parameter that controls the stride ofelements in the window</li><li><strong>return_indices</strong> – if <code>True</code>, will returnthe max indices along with the outputs. Useful for <ahref="https://pytorch.org/docs/stable/generated/torch.nn.MaxUnpool2d.html#torch.nn.MaxUnpool2d"><code>torch.nn.MaxUnpool2d</code></a>later</li><li><strong>ceil_mode</strong> – when True, will use ceil instead offloor to compute the output shape</li></ul><p>对于ceil_mode的两种情况如下图示意：</p><p><img src="/img/pytorch/8.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]], dtype=torch.float32)<br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyModel, self).__init__()<br>        self.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br><br>myModel = MyModel()<br>output = myModel(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor([[[[2., 3.],<br>          [5., 1.]]]])<br></code></pre></div></td></tr></table></figure><p>当我们将ceil_mode修改为False后：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">self.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)<br></code></pre></div></td></tr></table></figure><p>结果为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor([[[[2.]]]])<br></code></pre></div></td></tr></table></figure><p>我们可以直观的感受一下最大池化后的结果，我们可以将输入换成我们的数据集，在tensorboard上查看输入输出的差别：</p><p><img src="/img/pytorch/9.png" /></p><h2 id="非线性激活">7、非线性激活</h2><p>首先我们要使用的是torch.nn中的ReLU方法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                      [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyModel, self).__init__()<br>        self.relu1 = ReLU()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.relu1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br><br>myModel = MyModel()<br>output = myModel(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></div></td></tr></table></figure><p>结果为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor([[[[ 1.0000, -0.5000],<br>          [-1.0000,  3.0000]]]])<br>tensor([[[[1., 0.],<br>          [0., 3.]]]])<br></code></pre></div></td></tr></table></figure><p>然后我们使用torch.nn中的Sigmoid方法更直观的来查看结果：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyModel, self).__init__()<br>        self.sigmoid1 = Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.sigmoid1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>myModel = MyModel()<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_sigmoid&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, target = data<br>    output = myModel(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></div></td></tr></table></figure><p>在tensorboard中查看运行结果：</p><p><img src="/img/pytorch/10.png" /></p><h2 id="线性层-及其他层">8、线性层 及其他层</h2><p>主要还是查看官方文档。</p><h2id="搭建小实例和sequential的使用">9、搭建小实例和Sequential的使用</h2><p>我们使用之前学习过的基础来搭建一个简单的神经网络，例如我们来搭建cifar10的模型，其如下图所示</p><p><img src="/img/pytorch/11.png" /></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyModel, self).__init__()<br>        self.conv1 = Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool1 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv2 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool2 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv3 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool3 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.flatten = Flatten()<br>        self.linear1 = Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>)<br>        self.linear2 = Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br><br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        x = self.maxpool1(x)<br>        x = self.conv2(x)<br>        x = self.maxpool2(x)<br>        x = self.conv2(x)<br>        x = self.maxpool2(x)<br>        x = self.flatten(x)<br>        x = self.linear1(x)<br>        x = self.linear2(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></div></td></tr></table></figure><p>引入了Sequential方法后可以将我们搭建的模型简写出来</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></div></td></tr></table></figure><h2 id="损失函数与反向传播">10、损失函数与反向传播</h2><p>我们可以使用torch.nn中的L1Loss以及MSELoss方法来构造损失函数：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">input</span> = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=torch.float32)<br>target = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], dtype=torch.float32)<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>target = torch.reshape(target, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br><br>loss = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)<br>result = loss(<span class="hljs-built_in">input</span>, target)<br><br>loss_mse = nn.MSELoss()<br>result_mse = loss_mse(<span class="hljs-built_in">input</span>, target)<br><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(result_mse)<br></code></pre></div></td></tr></table></figure><p>运行结果为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor(2.)<br>tensor(1.3333)<br></code></pre></div></td></tr></table></figure><p>我们可以利用交叉熵作为损失函数来进行反向传播，利用backward方法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">myModel = MyModel()<br>loss = nn.CrossEntropyLoss()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = myModel(imgs)<br>    result_loss = loss(output, targets)<br>    result_loss.backward()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></div></td></tr></table></figure><h2 id="优化器">11、优化器</h2><p>使用torch.optim中的优化器:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">myModel = MyModel()<br>loss = nn.CrossEntropyLoss()<br>optim = torch.optim.SGD(myModel.parameters(), lr=<span class="hljs-number">0.01</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    runing_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = myModel(imgs)<br>        result_loss = loss(output, targets)<br>        optim.zero_grad()<br>        result_loss.backward()<br>        optim.step()<br>        runing_loss = runing_loss + result_loss<br>    <span class="hljs-built_in">print</span>(runing_loss)<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">tensor(<span class="hljs-number">18666.8984</span>, grad_fn=&lt;AddBackward0&gt;)<br>tensor(<span class="hljs-number">16161.6846</span>, grad_fn=&lt;AddBackward0&gt;)<br>tensor(<span class="hljs-number">15338.8057</span>, grad_fn=&lt;AddBackward0&gt;)<br>...<br></code></pre></div></td></tr></table></figure><h2 id="现有网络模型的使用与修改">12、现有网络模型的使用与修改</h2><p>我们使用torchvision中现有的vgg16模型进行使用：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">vgg16_true = torchvison.models.vgg16(pretrained=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 添加层</span><br>vgg16_true.classifier.add_module(<span class="hljs-string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br><span class="hljs-comment"># 修改层</span><br>vgg16_true.classifier[<span class="hljs-number">6</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)<br></code></pre></div></td></tr></table></figure><h2 id="网络模型的保存与读取">13、网络模型的保存与读取</h2><p>保存方法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 保存方法1</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><br><span class="hljs-comment"># 保存方法二，将模型参数保存为字典（官方推荐）</span><br>torch.save(vgg16.state_dict(), <span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>读取方法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 方法1保存的模型进行读取</span><br>model = torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><br><span class="hljs-comment"># 方法2保存的模型进行读取</span><br>vgg16 = vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>vgg16.load_state_dict(torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>))<br></code></pre></div></td></tr></table></figure><h2 id="完整的模型训练">14、完整的模型训练</h2><p>model.py：用于保存网络模型</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyModel, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span> * <span class="hljs-number">4</span> * <span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-comment"># 验证</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    myModel = MyModel()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = myModel(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></div></td></tr></table></figure><p>train.py：进行网络训练</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 获取数据集长度</span><br>train_data_length = <span class="hljs-built_in">len</span>(train_data)<br>test_data_length = <span class="hljs-built_in">len</span>(test_data)<br><br><span class="hljs-comment"># 利用DataLoader加载数据</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>myModel = MyModel()<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 优化器</span><br>learning_rate = <span class="hljs-number">0.01</span><br>optimizer = torch.optim.SGD(myModel.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练论数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------第%d轮训练开始------&quot;</span> % (i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    myModel.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        outputs = myModel(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        <span class="hljs-comment"># 利用优化器进行梯度清零</span><br>        optimizer.zero_grad()<br>        <span class="hljs-comment"># 反向传播</span><br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;，loss：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    myModel.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = myModel(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_length))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_length, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 保存每轮的数据</span><br>    torch.save(myModel, <span class="hljs-string">&quot;myModel_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></div></td></tr></table></figure><h2 id="使用gpu训练">15、使用GPU训练</h2><h3 id="方法一">方法一</h3><p>我们需要对网络模型、数据、损失函数进行修改</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 构建模型</span><br>myModel = MyModel()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    myModel = myModel.cuda()<br>    <br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br>    <br>imgs, targets = data<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>imgs = imgs.cuda()<br>targets = targets.cuda()<br></code></pre></div></td></tr></table></figure><h3 id="方法二">方法二</h3><p>需要在文件最开始定义训练的设备</p><p>此时为将设备设置为cpu</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br><br><span class="hljs-comment"># 构建模型</span><br>myModel = MyModel()<br>myModel.to(device)<span class="hljs-comment"># 模型和损失函数不用重新赋值</span><br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br>loss_fn.to(device)<br><br>imgs, targets = data<br>imgs = imgs.to(device)<span class="hljs-comment"># 数据需要重新赋值</span><br>targets = targets.to(device)<br></code></pre></div></td></tr></table></figure><p>如果要使用gpu需要如下设置：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>如果有多个gpu，可以按照如下选择设置：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cuda：0&quot;</span>)<br></code></pre></div></td></tr></table></figure><h2 id="模型验证套路">16、模型验证套路</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">image_path = <span class="hljs-string">&quot;./img/dog.png&quot;</span><br><br>image = Image.<span class="hljs-built_in">open</span>(image_path)<br>image = image.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br><br>transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="hljs-number">32</span>, <span class="hljs-number">32</span>)),<br>                                            torchvision.transforms.ToTensor()])<br><br>image = transform(image)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyModel, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span> * <span class="hljs-number">4</span> * <span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>myModel = torch.load(<span class="hljs-string">&quot;myModel_0.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(myModel)<br>image = torch.reshape(image, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>myModel.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    output = myModel(image)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-built_in">print</span>(output.argmax(<span class="hljs-number">1</span>))<br></code></pre></div></td></tr></table></figure><p>输出为：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tensor([[ 0.3308,  0.0307,  0.9064,  0.9474,  0.2715,  0.8123, -0.4077,  0.2044,<br>         -0.4149, -1.0106]])<br>tensor([3])<br></code></pre></div></td></tr></table></figure><p>可以看到最后预测我们的图片属于第三类</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线性模型</title>
    <link href="/2022/04/26/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/04/26/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="线性模型">线性模型</h1><h2 id="线性回归">1、线性回归</h2><p>假如咱们有一个数据集，里面的数据是俄勒冈州波特兰市的 <spanclass="math inline">\(47\)</span> 套房屋的面积和价格：</p><table><thead><tr class="header"><th style="text-align: center;">居住面积（平方英尺）</th><th style="text-align: center;">价格（千美元）</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(2104\)</span></td><td style="text-align: center;"><spanclass="math inline">\(400\)</span></td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(1600\)</span></td><td style="text-align: center;"><spanclass="math inline">\(330\)</span></td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(2400\)</span></td><td style="text-align: center;"><spanclass="math inline">\(369\)</span></td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(1416\)</span></td><td style="text-align: center;"><spanclass="math inline">\(232\)</span></td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(3000\)</span></td><td style="text-align: center;"><spanclass="math inline">\(540\)</span></td></tr><tr class="even"><td style="text-align: center;">……</td><td style="text-align: center;">……</td></tr></tbody></table><p><img src="/img/线性模型/1.png" /></p><p>如果来了一个新的面积，假设在销售价钱的记录中没有的，我们怎么办呢？</p><p>我们可以用一条曲线去尽量准的拟合这些数据，然后如果有新的输入过来，我们可以将曲线上这个点对应的值返回。这就是线性回归的思想。</p><p>为了让我们的房屋案例更有意思，咱们稍微对数据集进行一下补充，增加上每一个房屋的卧室数目：</p><table><thead><tr class="header"><th style="text-align: center;">居住面积（平方英尺）</th><th style="text-align: center;">卧室数目</th><th style="text-align: center;">价格（千美元）</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(2104\)</span></td><td style="text-align: center;"><spanclass="math inline">\(3\)</span></td><td style="text-align: center;"><spanclass="math inline">\(400\)</span></td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(1600\)</span></td><td style="text-align: center;"><spanclass="math inline">\(3\)</span></td><td style="text-align: center;"><spanclass="math inline">\(330\)</span></td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(2400\)</span></td><td style="text-align: center;"><spanclass="math inline">\(3\)</span></td><td style="text-align: center;"><spanclass="math inline">\(369\)</span></td></tr><tr class="even"><td style="text-align: center;"><spanclass="math inline">\(1416\)</span></td><td style="text-align: center;"><spanclass="math inline">\(2\)</span></td><td style="text-align: center;"><spanclass="math inline">\(232\)</span></td></tr><tr class="odd"><td style="text-align: center;"><spanclass="math inline">\(3000\)</span></td><td style="text-align: center;"><spanclass="math inline">\(4\)</span></td><td style="text-align: center;"><spanclass="math inline">\(540\)</span></td></tr><tr class="even"><td style="text-align: center;">……</td><td style="text-align: center;">……</td><td style="text-align: center;">……</td></tr></tbody></table><p>也是同样的方法，此时的自变量就变成了二维向量。</p><p>下面是一个典型的机器学习的过程，首先给出一个输入数据，我们的算法会通过一系列的过程得到一个估计的函数，这个函数有能力对没有见过的新数据给出一个新的估计，也被称为构建一个模型。就如同上面的线性回归函数。</p><p><img src="/img/线性模型/2.png" /></p><p>线性回归假设特征和结果满足线性关系。其实线性关系的表达能力非常强大，每个特征对结果的影响强弱可以有前面的参数体现，而且每个特征变量可以首先映射到一个函数，然后再参与线性计算。这样就可以表达特征与结果之间的非线性关系。</p><p>我们用<span class="math inline">\(x_1\)</span>，<spanclass="math inline">\(x_2\)</span>去描述feature里面的分量，比如 <spanclass="math inline">\(x_1\)</span>=居住面积，<spanclass="math inline">\(x_2\)</span>=卧室数目，我们可以做出一个估计函数：<span class="math display">\[h_\theta  (x) = \theta_0 + \theta_1 \times x_1 + \theta_2 \times x_2\]</span> 简化一下就为： <span class="math display">\[h(x) = \sum^n_{i=0}  \theta_i x_i = \theta^T x\]</span> 我们程序也需要一个机制去评估我们<spanclass="math inline">\(\theta\)</span>是否比较好，所以说需要对我们做出的<spanclass="math inline">\(h\)</span>函数进行评估，一般这个函数称为损失函数（loss function）或者错误函数(errorfunction)，描述<span class="math inline">\(h\)</span>函数不好的程度，在下面，我们称这个函数为<spanclass="math inline">\(J\)</span>函数： <span class="math display">\[J(\theta) = \frac 12 \sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2\]</span> 如何调整<span class="math inline">\(\theta\)</span>以使得<spanclass="math inline">\(J(\theta)\)</span>取得最小值有很多方法，其中有最小二乘法(leastsquares method)和梯度下降法等。</p><h3 id="最小二乘法">1.1 最小二乘法</h3><p>给定一个训练集，把<strong>设计矩阵（design matrix）</strong> <spanclass="math inline">\(x\)</span> 设置为一个 <spanclass="math inline">\(m\times n\)</span>矩阵（实际上，如果考虑到截距项，也就是 <spanclass="math inline">\(\theta_0\)</span> 那一项，就应该是 <spanclass="math inline">\(m\times (n+1)\)</span>矩阵），这个矩阵里面包含了训练样本的输入值作为每一行：</p><p><span class="math display">\[X =\begin{bmatrix}(x^{(1)}) ^T\\(x^{(2)}) ^T\\\vdots \\(x^{(m)}) ^T\\\end{bmatrix}\]</span></p><p>然后，咱们设 <span class="math inline">\(\vec{y}\)</span> 是一个<span class="math inline">\(m\)</span> 维向量（m-dimensionalvector），其中包含了训练集中的所有目标值：</p><p><span class="math display">\[Y =\begin{bmatrix}y^{(1)}\\y^{(2)}\\\vdots \\y^{(m)}\\\end{bmatrix}\]</span></p><p>假设<span class="math inline">\(h_\theta(x_1,x_2,...,x_m)=\theta_0+\theta_1 \times x_1 + \theta_2 \times x_2 + ... +\theta \timesx_m\)</span>​ 的矩阵表达式为 <span class="math display">\[h_\theta(x)=X_\theta\]</span> 损失函数定义为： <span class="math display">\[\frac \partial {\partial\theta_j}J(\theta) = \frac12 (X_\theta - Y) ^ T(X_\theta - T)\]</span> 这时候我们要对这个损失函数的 <spanclass="math inline">\(\theta\)</span> 向量进行求导取0，结果如下式：<span class="math display">\[\theta = (X^T X)^{-1} X^T Y\]</span></p><h3 id="梯度下降算法">1.2 梯度下降算法</h3><p>我们希望选择一个能让 <span class="math inline">\(J(\theta)\)</span>最小的 <span class="math inline">\(\theta\)</span>值。怎么做呢，咱们先用一个搜索的算法，从某一个对 <spanclass="math inline">\(\theta\)</span> 的“初始猜测值”，然后对 <spanclass="math inline">\(\theta\)</span> 值不断进行调整，来让 <spanclass="math inline">\(J(\theta)\)</span>逐渐变小，最好是直到我们能够达到一个使 <spanclass="math inline">\(J(\theta)\)</span> 最小的 <spanclass="math inline">\(\theta\)</span>。具体来说，咱们可以考虑使用梯度下降法（gradientdescent algorithm），这个方法就是从某一个 <spanclass="math inline">\(\theta\)</span>的初始值开始，然后逐渐重复更新：</p><p><span class="math display">\[\theta_j := \theta_j - \alpha \frac \partial {\partial\theta_j}J(\theta)\]</span></p><p>（上面的这个更新要同时对应从 <span class="math inline">\(0\)</span>到 <span class="math inline">\(n\)</span> 的所有<spanclass="math inline">\(j\)</span> 值进行。）这里的 <spanclass="math inline">\(\alpha\)</span>也称为学习速率。这个算法是很自然的，逐步重复朝向 <spanclass="math inline">\(J\)</span> 降低最快的方向移动。</p><p>要实现这个算法，咱们需要解决等号右边的导数项。首先来解决只有一组训练样本<span class="math inline">\((x, y)\)</span>的情况，这样就可以忽略掉等号右边对 <spanclass="math inline">\(J\)</span> 的求和项目了。公式就简化下面这样：</p><p><span class="math display">\[\begin{aligned}\frac \partial {\partial\theta_j}J(\theta) &amp; = \frac \partial{\partial\theta_j} \frac  12(h_\theta(x)-y)^2\\&amp; = 2 \cdot\frac 12(h_\theta(x)-y)\cdot \frac \partial{\partial\theta_j}  (h_\theta(x)-y) \\&amp; = (h_\theta(x)-y)\cdot \frac \partial{\partial\theta_j}(\sum^n_{i=0} \theta_ix_i-y) \\&amp; = (h_\theta(x)-y) x_j\end{aligned}\]</span></p><p>对单个训练样本，更新规则如下所示：</p><p><span class="math display">\[\theta_j := \theta_j + \alpha (y^{(i)}-h_\theta (x^{(i)}))x_j^{(i)}\]</span></p><p>第一种就是下面这个算法：</p>$<span class="math display">\[\begin{aligned}&amp;\qquad 重复直到收敛 \{ \\&amp;\qquad\qquad\theta_j := \theta_j + \alpha\sum^m_{i=1}(y^{(i)}-h_\theta (x^{(i)}))x_j^{(i)}\quad(对每个j) \\&amp;\qquad\}\end{aligned}\]</span><p>$</p><p>读者很容易能证明，在上面这个更新规则中求和项的值就是<spanclass="math inline">\(\frac {\partial J(\theta)}{\partial\theta_j}\)</span> （这是因为对 <span class="math inline">\(J\)</span>的原始定义）。所以这个更新规则实际上就是对原始的成本函数<spanclass="math inline">\(J\)</span>进行简单的梯度下降。这一方法在每一个步长内检查所有整个训练集中的所有样本，也叫做<strong>批量梯度下降法（batchgradientdescent</strong>）。这里要注意，因为梯度下降法容易被局部最小值影响，而我们要解决的这个线性回归的优化问题只能有一个全局的而不是局部的最优解；因此，梯度下降法应该总是收敛到全局最小值（假设学习速率<span class="math inline">\(\alpha\)</span> 不设置的过大）。</p><p>对咱们之前的房屋数据集进行批量梯度下降来拟合 <spanclass="math inline">\(\theta\)</span>，把房屋价格当作房屋面积的函数来进行预测，我们得到的结果是 <spanclass="math inline">\(\theta_0 = 71.27, \theta_1 =0.1345\)</span>。如果把 <spanclass="math inline">\(h_{\theta}(x)\)</span> 作为一个定义域在 <spanclass="math inline">\(x\)</span>上的函数来投影，同时也投上训练集中的已有数据点，会得到下面这幅图：</p><p><img src="/img/线性模型/3.png" /></p><p>如果在数据集中添加上卧室数目作为输入特征，那么得到的结果就是 <spanclass="math inline">\(\theta_0 = 89.60, \theta_1 = 0.1392, \theta_2 =−8.738\)</span>​。这个结果就是用批量梯度下降法来获得的。</p><p>此外还有另外一种方法能够替代批量梯度下降法，这种方法效果也不错。如下所示：</p>$<span class="math display">\[\begin{aligned}&amp;\qquad循环：\{ \\&amp;\qquad\qquad i从1到m,\{   \\&amp;\qquad\qquad\qquad\theta_j :=\theta_j  +\alpha(y^{(i)}-h_{\theta}(x^{(i)}))x_j^{(i)} \qquad(对每个 j)\\&amp;\qquad\qquad\}  \\&amp;\qquad\}\end{aligned}\]</span><p>$</p><p>在这个算法里，我们对整个训练集进行了循环遍历，每次遇到一个训练样本，根据每个单一训练样本的误差梯度来对参数进行更新。这个算法叫做<strong>随机梯度下降法（stochasticgradient descent）</strong>，或者叫<strong>增量梯度下降法（incrementalgradientdescent）</strong>。批量梯度下降法要在运行第一步之前先对整个训练集进行扫描遍历，当训练集的规模<span class="math inline">\(m\)</span>变得很大的时候，引起的性能开销就很不划算了；随机梯度下降法就没有这个问题，而是可以立即开始，对查询到的每个样本都进行运算。通常情况下，随机梯度下降法查找到足够接近最低值的<span class="math inline">\(\theta\)</span>的速度要比批量梯度下降法更快一些。（也要注意，也有可能会一直无法收敛（converge）到最小值，这时候<span class="math inline">\(\theta\)</span> 会一直在 <spanclass="math inline">\(J(\theta)\)</span>最小值附近震荡；不过通常情况下在最小值附近的这些值大多数其实也足够逼近了，足以满足咱们的精度要求，所以也可以用。）由于这些原因，特别是在训练集很大的情况下，随机梯度下降往往比批量梯度下降更受青睐。</p>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
